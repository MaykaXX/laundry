#include <iostream>
#include <windows.h>
#include <string>
#include <map>
#include <fstream>
#include "termcolor.hpp"



void list_activity();
void which_one();
void code_for_washing();

int main() {
    SetConsoleOutputCP(65001); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Æ–Ω–∏–∫–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ emoji
    std::cout << termcolor::bright_magenta << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∞—á–µ—á–Ω—É—é!üß∫\n–ó–¥–µ—Å—å –≤—Å—ë –∫—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ —á–∏—Å—Ç–æ—Ç—ã –∏ —É—é—Ç–∞\n–ü—Ä–æ—á—Ç–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–º–æ–≥–∏ –ø–µ—Ä–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å!üåûü´ß\n\n" << termcolor::reset;
    list_activity();
}

void list_activity() {
    std::map<int, std::string> activities;
    activities[1] = "–û–±—É—á–µ–Ω–∏–µ";
    activities[2] = "–°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É üëï";
    activities[3] = "–ñ–¥–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üëÄ";
    activities[4] = "–°—É—à–∏—Ç—å –æ–¥–µ–∂–¥—É üçÉ";
    activities[5] = "–°–ª–æ–∂–∏—Ç—å –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üåª";
    activities[6] = "–ù–∏—á–µ–≥–æ";

    for (const auto& pair : activities) {
        std::cout << pair.first << " " << pair.second << std::endl;
    }
    which_one();  
}
void which_one() {
    int choose;
    std::cout << "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? ";
    std::cin >> choose;
    std::cout << std::endl;

    if (choose == 1) {
        std::ifstream file("instruction.txt");
        if (file.is_open()) {
            std::string line;
            while (std::getline(file, line)) {
                std::cout << line << std::endl;
            }
            file.close();
        }
        std::cout << std::endl;
        which_one();
    }
    else if (choose == 2) {
        code_for_washing();
        which_one();
    }
    else if (choose == 3) {
        std::cout << "–ü–æ—Ä–æ–π –≤—Ä–µ–º—è —Å–ª–æ–≤–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!" << std::endl;
        which_one();
    }
    else if (choose == 4) {
        std::cout << "–ï—Å–ª–∏ –±—ã –Ω–µ —Å—É—à–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∫–∞,\n–æ–¥–µ–∂–¥–∞ –±—ã –¥—Ä—É–∂–∏–ª–∞ —Å –≤–µ—Ç—Ä–æ–º!" << std::endl;
        which_one();
    }
    else if (choose == 5) {
        std::cout << "–í—Å–µ —Å–ª–æ–∂–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ!" << std::endl;
        which_one();
    }
    else if (choose == 6) {
        std::cout << "–•–æ—Ä–æ—à–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!üåû\n";
    }
    else {
        std::cout << "–û–ô, —Ç—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!" << std::endl;
        which_one();
    }

}
void code_for_washing() {
    std::cout << "–í–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è —Å—Ç–∏–∞—Ä–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: ";
    int code;
    std::cin >> code;
    if (code != 1010) {
        std::cout << "–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π!";
    }
    else {
        std::cout << "–û–¥–µ–∂–¥–¥–∞ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è!" << std::endl;
    }
}

void good_day() {
    std::cout << "–ü–æ–∂–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è" << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;
}