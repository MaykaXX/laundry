#include <iostream>
#include <istream>
#include <windows.h>
#include <string>
#include <map>
#include <fstream>
#include "termcolor.hpp"
#include <time.h>
#include <vector>
#include <ctime>
#include <chrono>
#include <thread>
#include <functional>
#include <algorithm>
#include <random>
#include <limits>
#include <unordered_map>
#undef max

void slowPrint(const std::string& text, int delay = 10) {
    for (char c : text) {
        std::cout << c << std::flush;
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
    }
    std::cout << std::endl;
}

class Laundry;
class GameClock {
private:
    int hour;
    int minutes;
    int day;
    int quality_customers_day;

public:     
    GameClock() : hour(8), minutes(00), day(1) {} // –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 6 —É—Ç—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è

    void advanceTime(int hourToAdvance, int minutesToAdvance) {
        hour += hourToAdvance;
        minutes += minutesToAdvance;
        
        while (minutes >= 60) {
            hour += 1;
            minutes -= 60;
        }
        
        if (isNight())
            go_to_bed();
            

        while (hour >= 24) {
            hour -= 24;
            //minutes -= 60;
            day++;
            quality_customers_day = 0;
            std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
            random_qual_custom();
        }
    }

    void go_to_bed() {
         std::cout << "–¢–µ–±–µ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å!" << std::endl << "–ü–æ–π–¥–µ—à—å?(–¥–∞/–Ω–µ—Ç) ";
         std::string message;
         std::cin >> message;
         std::cout << std::endl;
         if (message == "–¥–∞") {
             hour = 8;
             minutes = 00;
             day++;
             std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
             random_qual_custom();
         }
         else if (message == "–Ω–µ—Ç") {
             while (hour >= 24) {
                 std::cout << "–¢—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏üåô!";
                 hour = 8;
                 minutes = 00;
                 day++;
                 std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
                 random_qual_custom();
                 
             }
         }
     }

    void random_qual_custom() {
        int random_num = 1 + rand() % 3;
        quality_customers_day = random_num;
        std::cout << quality_customers_day << std::endl;      
        //std::cout << "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ clock: " << this << std::endl;

    }

    void getCustomerCount() const {
        std::cout << quality_customers_day << std::endl;
        
    }

    void decrementCustomerCount() {
        if (quality_customers_day > 0)
            --quality_customers_day;
    }

    void showTime() const { 
        getCustomerCount();
        //std::cout << "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ clock: " << this << std::endl;

        if (minutes > 9)
            std::cout << "–î–µ–Ω—å " << day << ", " << hour << ":" << minutes << std::endl << std::endl;
        else
            std::cout << "–î–µ–Ω—å " << day << ", " << hour << ":" << "0" << minutes << std::endl << std::endl;
    }

    bool isDaytime() const {
        return hour >= 6 && hour < 20;
    }

    bool isNight() const {
        return !isDaytime();
    }
    
    friend class Laundry;

};

class QuestFlags {
private: 
    std::unordered_map<std::string, bool> flags;

public:
    // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞
    void set(const std::string& name, bool value = true) {
        flags[name] = value;
    }

    // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ 
    bool get(const std::string& name) const {
        auto it = flags.find(name);
        return it != flags.end() ? it->second : false;
    }

    // —É–¥–∞–ª–∏—Ç—å —Ñ–ª–∞–≥
    void vlear(const std::string& name) {
        flags.erase(name);
    }

    // –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
    void reset() {
        flags.clear();
    }
};

class Village {
private:
    struct Building {
        std::string name;
        std::string icon;
    };

    std::vector<Building> village;

    bool unlock_new_buildings = false;

public:
    GameClock clock;
    
    
    void message_village() {
        std::cout << termcolor::bright_blue << "–¢—ã –≤ –¥–µ—Ä–µ–≤–Ω–µ" << termcolor::reset << std::endl;
        clock.advanceTime(0, 10);
    }

    void drawVillageMap(const std::vector<Building>& buildings){
        std::cout << termcolor::cyan << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –î–ï–†–ï–í–ù–Ø ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" << termcolor::reset;
        std::cout << "‚ïë                               ‚ïë\n";

        for (const auto& b : buildings) {
            std::cout << "‚ïë   " << b.icon << "  " << b.name;
            // –î–æ–±–∏—Ç—å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–º–∫–∏ (30 —Å–∏–º–≤–æ–ª–æ–≤ —à–∏—Ä–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
            int padding = 19 - static_cast<int>(b.name.size()) - 4;
            std::cout << std::string(padding, ' ') << "‚ïë\n";
        }

        std::cout << "‚ïë                               ‚ïë\n";
        std::cout << termcolor::cyan << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n" << termcolor::reset;
    }
        
    void where_go() {
        std::string choose;
        std::cout << "–ö—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏? ";
        std::cin.ignore();
        std::getline(std::cin, choose);
        std::cout << std::endl;

        if (choose == "–î–æ–º –¢–∏—Ö–æ–≤–∞—Ä–æ–≤") {
            print_Silkbrew();
            std::cout << "üë¥ –ú—É—Å—Ç–∞—Ñ–∞: ";
            slowPrint("–ê –≤–æ—Ç –∏ —Ç—ã. –ó–∞—Ö–æ–¥–∏, –Ω–µ —Å—Ç–æ–π –Ω–∞ –ø–æ—Ä–æ–≥–µ ‚Äî –í–∞–Ω–µ—Å—Å–∞ —Å–µ–π—á–∞—Å –ø–∏—Ä–æ–≥ –ø—Ä–∏–Ω–µ—Å—ë—Ç, —Å–≤–µ–∂–∏–π, —Å —Ä–µ–≤–µ–Ω–µ–º.\n–ê –ø–æ–∫–∞ —Å—è–¥—å, —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–æ –ö–∞—Ç–∞–ª–∏–Ω\n–î–∞–≤–Ω—ã–º-–¥–∞–≤–Ω–æ –∑–¥–µ—Å—å –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ, –≤–µ—Ç–µ—Ä –¥–∞ –æ–¥–∏–Ω —Å—Ç–∞—Ä–∏–∫ —Å –∏–≥–ª–æ–π. –ö–∞—Ç–∞–ª—å –µ–≥–æ –∑–≤–∞–ª–∏. –®–∏–ª –æ–Ω –ª—é–¥—è–º –æ–¥–µ–∂–¥—É –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—Ä–∞–ª –ø–ª–∞—Ç—É. –ì–æ–≤–æ—Ä–∏–ª: ¬´–•–æ–ª–æ–¥ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–∫–∞–Ω—å—é, –Ω–æ –∏ –¥–æ–±—Ä–æ–º¬ª.\n–õ—é–¥–∏ –Ω–∞—á–∞–ª–∏ —Å–µ–ª–∏—Ç—å—Å—è —Ä—è–¥–æ–º. –ö—Ç–æ —Å –º–æ–ª–æ—Ç–∫–æ–º, –∫—Ç–æ —Å —Ç–µ—Å—Ç–æ–º, –∫—Ç–æ —Å –∫–Ω–∏–≥–∞–º–∏. –¢–∞–∫ –∏ –≤—ã—Ä–æ—Å–ª–∞ –¥–µ—Ä–µ–≤–Ω—è. –ù–µ –ø–æ –ø—Ä–∏–∫–∞–∑—É, –∞ –ø–æ –¥–æ–±—Ä–æ–π –≤–æ–ª–µ.\n–° —Ç–µ—Ö –ø–æ—Ä –∏ –∂–∏–≤—ë–º: –∫–∞–∂–¥—ã–π –¥–µ–ª–∞–µ—Ç —Å–≤–æ—ë –¥–µ–ª–æ ‚Äî –∏ –¥–ª—è —Å–µ–±—è, –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö.\n–ê —Ç–µ–ø–µ—Ä—å –≤–æ—Ç –∏ —Ç—ã —Ç—É—Ç. –£–∂ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –Ω–∞–≤–µ—Ä–Ω–æ–µ?");

            unlock_new_buildings = true;
            std::cout << termcolor::blue << "[–æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è]" << termcolor::reset << std::endl;

            std::cout << "üëµ –í–∞–Ω–µ—Å—Å–∞";
            slowPrint("–° –¥–æ—Ä–æ–≥–∏-—Ç–æ, –ø–æ–¥–∏, —É—Å—Ç–∞–ª. –í–æ—Ç, –º–∏–ª–∞–π, –ø–∏—Ä–æ–≥. –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ –ø–µ—á–∏ ‚Äî —Ç—ã –ø–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–∞–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—Å—è.");

            clock.advanceTime(1, 30);
        }

        else if (choose == "–î–æ–º –ì–≤–æ–∑–¥–µ–≤—ã—Ö") {
            print_Gvozdev();
            
        }
        else if (choose == "–†—É–º—è–Ω–æ–≤—ã—Ö") {
            print_Rumyanov();
           
        }
        else if(choose == "–°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤—ã") {
            print_Slovesnikov();
            
        }
        else {
            std::cout << termcolor::red << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!" << termcolor::reset << std::endl;
        }

        std::cout << "\n[–ù–∞–∂–º–∏ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–µ—Ä–µ–≤–Ω–∏]\n";
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        list_activity_village();

    }

    std::pair<std::map<int, std::string>, std::map<int, std::function<void()>>> getActionVillage() {
        std::map<int, std::string> activities;
        std::map<int, std::function<void()>> action;

        int nextIndex = 1;
        activities[nextIndex] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É –¥–µ—Ä–µ–≤–Ω–∏";
        action[nextIndex++] = [this]() {
            std::vector<Building> village;

            if (!unlock_new_buildings) {
                 village = {
                    {"üè°", "–î–æ–º –¢–∏—Ö–æ–≤–∞—Ä–æ–≤"},
                    {"üß∫", "–ü—Ä–∞—á–µ—á–Ω–∞—è (—Ç—ã –∑–¥–µ—Å—å)"},
                    {"[?]", "???"},
                };
            }
            else if (unlock_new_buildings) {
                village = {
                    {"üè°", "–î–æ–º –¢–∏—Ö–æ–≤–∞—Ä–æ–≤"},
                    {"üß∫", "–ü—Ä–∞—á–µ—á–Ω–∞—è (—Ç—ã –∑–¥–µ—Å—å)"},
                    {"üß±", "–î–æ–º –ì–≤–æ–∑–¥–µ–≤—ã—Ö"},
                    {"ü•ñ", "–†—É–º—è–Ω–æ–≤—ã—Ö"},
                    {"üìñ", "–°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤—ã"}
                };
            }
            drawVillageMap(village);
        };

        activities[nextIndex] = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–º—É";
        action[nextIndex++] = [this]() {
            where_go();
            };

        return { activities, action };
    }

    struct house {
        std::string name; //–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–º –ö–∞–∑–∞–Ω–æ–≤—ã—Ö
        std::vector<std::string> members;
        std::string specialization;
    };
    
    void print_Silkbrew() {
        house family_Silkbrew;
        family_Silkbrew.name = "–¢–∏—Ö–æ–≤–∞—Ä—ã";
        family_Silkbrew.members = { "üë¥ –ú—É—Å—Ç–∞—Ñ–∞", "üëµ –í–∞–Ω–µ—Å—Å–∞" };
        family_Silkbrew.specialization = "Silkbrew Delight (—Ä—É—Å—Å. –ü–∏—Ä–æ–≥ –∏ –ü–∞—Ä)";

        std::cout << family_Silkbrew.name << " (" << family_Silkbrew.specialization << "):\n";

        for (const auto& resident : family_Silkbrew.members) {
            std::cout << " - " << resident << std::endl << std::endl;
        }
    }

    void print_Gvozdev() {
        house family_Gvozdev;
        family_Gvozdev.name = "–ì–≤–æ–∑–¥–µ–≤—ã";
        family_Gvozdev.members = { "üî® –ü—ë—Ç—Ä –ì–≤–æ–∑–¥–µ–≤", " üìê –ê–ª—ë–Ω–∞ –ì–≤–æ–∑–¥–µ–≤–∞", "üê¶ –¢–∏–º–æ—à–∞"};
        family_Gvozdev.specialization = "Ironroot Craftworks (—Ä—É—Å—Å. –ö—Ä–µ–ø–∫–æ–µ –î–µ–ª–æ)";                       

        std::cout << family_Gvozdev.name << " (" << family_Gvozdev.specialization << "):\n";

        for (const auto& resident : family_Gvozdev.members) {
            std::cout << " - " << resident << std::endl;
        }

    }
    /*  –ü—ë—Ç—Ä –ì–≤–æ–∑–¥–µ–≤ ‚Äî —Å—Ç—Ä–æ–≥–∏–π, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å—Å–≤–µ—Ç–∞

        –ê–ª—ë–Ω–∞ –ì–≤–æ–∑–¥–µ–≤–∞ ‚Äî —á–µ—Ä—Ç–∏—Ç –ø–ª–∞–Ω—ã –∏ –ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫

        –¢–∏–º–æ—à–∞ ‚Äî —Å—ã–Ω, —Å–æ–±–∏—Ä–∞–µ—Ç –≥–≤–æ–∑–¥–∏ –∏ –¥–µ–ª–∞–µ—Ç —Å–∫–≤–æ—Ä–µ—á–Ω–∏–∫–∏ */


    void print_Rumyanov() {
        house family_Rumyanov;
        family_Rumyanov.name = "–†—É–º—è–Ω–æ–≤—ã";
        family_Rumyanov.members = { "üçû –ú–∞—Ä—Ñ–∞ –†—É–º—è–Ω–æ–≤–∞", "üö≤ –ó–∞—Ö–∞—Ä –†—É–º—è–Ω–æ–≤", "üßÅ –í–∞—Ä—è" };
        family_Rumyanov.specialization = "Hearth & Crust (—Ä—É—Å—Å. –û—á–∞–≥ –∏ –ö–æ—Ä–æ—á–∫–∞)";

        std::cout << family_Rumyanov.name << " (" << family_Rumyanov.specialization << "):\n";

        for (const auto& resident : family_Rumyanov.members) {
            std::cout << " - " << resident << std::endl;
        }
    }
    /*  –ú–∞—Ä—Ñ–∞ –†—É–º—è–Ω–æ–≤–∞ ‚Äî –ø–µ—á—ë—Ç —Ö–ª–µ–± –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å —Ç–µ—Å—Ç–æ–º

        –ó–∞—Ö–∞—Ä –†—É–º—è–Ω–æ–≤ ‚Äî —Ä–∞–∑–≤–æ–∑–∏—Ç –≤—ã–ø–µ—á–∫—É, —à—É—Ç–∏—Ç —Å–æ –≤—Å–µ–º–∏

        –í–∞—Ä—è ‚Äî –∏—Ö –¥–æ—á—å, –¥–µ–ª–∞–µ—Ç –ø–∏—Ä–æ–∂–∫–∏ —Å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—á–∏–Ω–∫–∞–º–∏ */

    void print_Slovesnikov() {
        house family_Slovesnikov;
        family_Slovesnikov.name = "–°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤—ã ";
        family_Slovesnikov.members = { "üìñ –°–µ–º—ë–Ω –°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤", "‚úèÔ∏è –õ–∏–¥–∏—è –°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤–∞", "üå† –ú–∏—à–∞" };
        family_Slovesnikov.specialization = "Hearth & Crust (—Ä—É—Å—Å. –û—á–∞–≥ –∏ –ö–æ—Ä–æ—á–∫–∞)";

        std::cout << family_Slovesnikov.name << " (" << family_Slovesnikov.specialization << "):\n";

        for (const auto& resident : family_Slovesnikov.members) {
            std::cout << " - " << resident << std::endl;
        }
    }
    /*  –°–µ–º—ë–Ω –°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤ ‚Äî –≤–µ–¥—ë—Ç –ª–µ—Ç–æ–ø–∏—Å—å, —á–∏—Ç–∞–µ—Ç —É –∫–æ—Å—Ç—Ä–∞

        –õ–∏–¥–∏—è –°–ª–æ–≤–µ—Å–Ω–∏–∫–æ–≤–∞ ‚Äî —É—á–∏—Ç –≥—Ä–∞–º–æ—Ç–µ –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö

        –ú–∏—à–∞ ‚Äî —Å—ã–Ω, —Å–æ—á–∏–Ω—è–µ—Ç —Å–∫–∞–∑–∫–∏ –∏ –º–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –ø–∏—Å–∞—Ç–µ–ª–µ–º */

    void list_activity_village() {
        bool running = true;
        while (running) {
            clock.showTime();

            auto actionsPair = getActionVillage();
            auto activities = actionsPair.first;
            auto actions = actionsPair.second;
            int exitIndex = static_cast<int>(activities.size());

            for (const auto& pair : activities) {
                std::cout << pair.first << " " << pair.second << std::endl;
            }

            int choice;
            std::cout << "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? ";
            std::cin >> choice;
            std::cout << std::endl;

            if (actions.count(choice)) {
                actions[choice]();
                if (choice == exitIndex) {
                    running = false;
                }
            }
            else {
                std::cout << "–û–ô, —Ç—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!" << std::endl;
            }

        }
    }

};

class WatchingBirds {
protected:
    int quality_birds;
    
    
public:
    void random_meet() {
        int num = 1 + std::rand() % 100;
        if (num <= 10) {
            std::cout << "–¢–∏—Ö–æ: –ü—Ç–∏—á–∫–∞ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ!" << std::endl;
            take_photo();
        }
        else {
            std::cout << "–ù–µ–±–æ —á–∏—Å—Ç–æ–µ... –ü—Ç–∏—Ü –Ω–µ –≤–∏–¥–Ω–æ." << std::endl;
        }
     }
    void take_photo() {
        std::string message;
        std::cout << "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ?" << termcolor::cyan << "(–¥–∞ / –Ω–µ—Ç) " << termcolor::reset;
        std::cin >> message;
        std::cout << std::endl;
        if (message == "–¥–∞") {
            random_bird();
            
        }
    }
    void random_bird() {
        struct Bird {
            std::string name;
            std::string rarity;
            //int age;
        };

        std::vector<Bird> birds = {
            {"–í–æ—Ä–æ–±–µ–π", "–æ–±—ã—á–Ω–∞—è"},
            {"–°–∏–Ω–∏—Ü–∞", "–æ–±—ã—á–Ω–∞—è"},
            {"–î—è—Ç–µ–ª", "—Ä–µ–¥–∫–∞—è"},
            {"–§–∏–ª–∏–Ω", "—Ä–µ–¥–∫–∞—è"},
            {"–§–µ–Ω–∏–∫—Å", "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è"},
            {"–¢—Ä—ë—Ö–≥–ª–∞–∑—ã–π –≤–æ—Ä–æ–Ω", "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è"},
            {"–ñ–∞—Ä-–ø—Ç–∏—Ü–∞", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"},
            {"–ì–∞—Ä–ø–∏—è", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"}
        };

        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è (—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â§ 100)
        std::map<std::string, int> rarity_weight = {
            {"–æ–±—ã—á–Ω–∞—è", 65},
            {"—Ä–µ–¥–∫–∞—è", 20},
            {"—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è", 10},
            {"–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 5},
        };

        int roll = std::rand() % 100;

        std::string selected_rarity;
        int threshold = 0;

        for (const auto& pair : rarity_weight) {
            const std::string& rarity = pair.first;
            int weight = pair.second;
            
            threshold += weight;
            if (roll < threshold) {
                selected_rarity = rarity;
                break;
            }
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ç–∏—Ü –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        std::vector<Bird> filtered;
        for (const auto& bird : birds) {
            if (bird.rarity == selected_rarity)
                filtered.push_back(bird);
        }


        // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ç–∏—Ü—ã –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        int index = std::rand() % filtered.size();
        Bird chosen = filtered[index];

        std::cout << "–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø—Ç–∏—Ü–∞: " << chosen.name << " [";
        colored_rarity(chosen.rarity);
        std::cout << "]" << std::endl;
        quality_birds += 1;


    }
    void colored_rarity(const std::string& rarity) {
        if (rarity == "–æ–±—ã—á–Ω–∞—è")
            std::cout << termcolor::green;
        else if(rarity == "—Ä–µ–¥–∫–∞—è")
            std::cout << termcolor::yellow;
        else if (rarity == "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è")
            std::cout << termcolor::blue;
        else if (rarity == "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è")
            std::cout << termcolor::on_red;

        std::cout << rarity << termcolor::reset;
    }
      
};

class Laundry {
private:
    bool sock_hunt = false, has_found_sock_vladimir = false;
    std::string us_name;
    int max_number_of_customers = 0, number_of_customers = 0, amount_clothing_dirty = 0, amount_clothing_clean = 0, level_serviceability = 5;
    float price_washing = 2.0f, price_drying = 1.0f, fine = 0, wallet = 0; // $
    bool is_village = false, has_met_mustafa = false, has_met_vanessa = false, has_met_ayzuk = false;
    // —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫-–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å (max_number_of_customers)
    // —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–∞–º –æ–±—Å–ª—É–∂–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (number_of_customers)
    GameClock& clock;
    QuestFlags questFlags;

protected:
    bool iscamera;
public:

    Laundry(const std::string& name, GameClock& clock_ref) : us_name(name), iscamera(false), clock(clock_ref) {}

    void check_day() {
        if (clock.day < 5) {
            iscamera = false;
        }
    }

    std::string user_text(std::string text) {
        std::string user_name = "üë§ " + us_name + ": ";
        return user_name + text;
    }

    void wait_for_enter() {
        std::cout << termcolor::blue << "(–Ω–∞–∂–º–∏—Ç–µ Enter)" << termcolor::reset << std::endl;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        std::cout << std::string(3, '\n'); //–æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
    }

    std::map<int, std::string> assigments;
    int nextAssigId = 1;

    void add_assigm(const std::string& description) {
        assigments[nextAssigId] = description;
        nextAssigId++;
    }

    void printAssigm() {
        for (const auto& pair : assigments) {
            std::cout << pair.first << ": " << pair.second << std::endl;
        }
    }

    void customers() {
        struct Customers {
            std::string name;
            std::string text;
            std::function<void()> interaction; // —Ñ—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        };
        

        std::vector<Customers> customer = {
            {"üë©‚Äçü¶∞ –û–ª—å–≥–∞", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –∑–¥–µ—Å—å –±–µ–ª—å—ë —Å –æ—Ç–ø—É—Å–∫–∞ –ø–µ—Å–æ–∫ - –ø–æ–≤—Å—é–¥—É!",
                [this]() {
                    slowPrint("üí¨ –û–ª—å–≥–∞ : –ú–æ–∂–µ—Ç —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∂–∏–º '–ø–ª—è–∂–Ω–∞—è —Å—Ç–∏—Ä–∫–∞'? ");
                    
                    std::cout << termcolor::bright_grey << "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç—É..." << termcolor::reset;
                    wait_for_enter();
                                            
                    this->user_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç—É...");
                }
            },
            {"üßî –í–ª–∞–¥–∏–º–∏—Ä", "",
                [this]() {
                    if (!has_found_sock_vladimir) {
                        slowPrint("üí¨ –í–ª–∞–¥–∏–º–∏—Ä: –ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è –º–∞—à–∏–Ω–∫–∞ –Ω–µ —Å—ä–µ—Å—Ç –µ—â—ë –æ–¥–∏–Ω –Ω–æ—Å–æ–∫...");

                        std::cout << termcolor::blue << "–ù–æ–í—ã–ô –∫–í–µ–°—Ç –ü–æ–õ—É–ß–µ–ù!" << termcolor::reset << std::endl;
                        
                        std::string assigment = "üí° –ù–∞–π–¥–∏ –≤—Ç–æ—Ä–æ–π –Ω–æ—Å–æ–∫ –≤–ª–∞–¥–∏–º–∏—Ä–∞";
                        std::cout << assigment << std::endl;
                        add_assigm(assigment);
                        std::cout << termcolor::bright_grey << "–ö–∞–∂–µ—Ç—Å—è –ø–æ—Ä–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ —Å–ª–æ–∂–∏—Ç—å.." << termcolor::reset << std::endl;

                        this->sock_hunt = true;
                    }
                    else {
                        slowPrint("üßî –í–ª–∞–¥–∏–º–∏—Ä: –°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤. –û–¥–µ–∂–¥–∞ —á–∏—Å—Ç–∞—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî —Ç–æ–∂–µ.");
                        std::cout << termcolor::bright_grey << "–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!" << termcolor::reset;
                        wait_for_enter();

                        this->user_text("–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!");
                    }
                }
            },
            {"üëß –°–æ—Ñ–∏—è", "–ú–∞–º, –∞ –º–æ–∂–Ω–æ —Å—Ç–∏—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫–∏?üß∏", [this]() {
                std::string name_sofia = "üëß –°–æ—Ñ–∏—è: ";
                std::cout << name_sofia;
                slowPrint("–£ –º–æ–µ–≥–æ –º–∏—à–∫–∏ –≥—Ä—è–∑–Ω–∞—è –ª–∞–ø–∫–∞. –¢—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å? –û–Ω –Ω–µ –±–æ–∏—Ç—Å—è!");
                
                std::string question;
                std::cout << "–¥–∞/–Ω–µ—Ç: ";
                std::cin >> question;
                std::cout << std::endl;

                if (question == "–Ω–µ—Ç") {
                    std::cout << name_sofia;
                    slowPrint("–ê –æ–Ω –∏ —Ç–∞–∫ —É–∂–µ –≤–µ—Å—å –ø—ã–ª—å–Ω—ã–π... –ù—É –ª–∞–¥–Ω–æ. –Ø –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä—è—á—É –µ–≥–æ –ø–æ–¥ –ø–æ–¥—É—à–∫—É.");
                    std::cout << "üò¢" << std::endl;
                }
                else if (question == "–¥–∞") {
                    questFlags.set("sofia_bear_given");
                    if (questFlags.get("sofia_bear_given")) {
                        
                        questFlags.set("sofia_bear");

                        std::cout << termcolor::blue << "–ü–æ–ª—É—á–µ–Ω –º–µ–¥–≤–µ–¥—å!" << termcolor::reset << std::endl;
                    }
                }

            }},
            {"üßë‚Äçüîß –ò–≥–æ—Ä—å", "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –∑–∞–±—ã–ª –∫–ª—é—á–∏ –æ—Ç —Å—É—à–∏–ª–∫–∏...", [this]() {}},
            {"üëµ –ë–∞–±—É—à–∫–∞ –ó–∏–Ω–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—Å—ë –∫–∏–ø—è—Ç–∫–æ–º, –ø–æ—Ç–æ–º –ø–æ–ª–æ—Å–∫–∞—Ç—å - –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞!", []() {}},
            {"üìö –ú–∞—Ä–∫", "–Ø –ø–æ–∫–∞ –ø–æ—Å—Ç–∏—Ä–∞—é, –∑–∞–æ–¥–Ω–æ –¥–∏–ø–ª–æ–º –Ω–∞–ø–∏—à—É...", [this]() {}},
            {"üé® –ê–Ω–Ω–∞", "–ö—Ç–æ-—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª —Ä–æ–∑–æ–≤—ã–π –ø–ª–∞—Ç–æ–∫ –≤ –≥–æ—Ä–æ—à–µ–∫? üéÄ", [this]() {}},
            {"üê± –ö–æ—Ç –ë–æ—Ä–∏—Å", "–ú—è—É! –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –º–æ–π –ø–ª–µ–¥, –æ–Ω –ø–∞—Ö–Ω–µ—Ç –º–Ω–æ—é!", [this]() {}},
            {"üßò‚Äç‚ôÇÔ∏è –ê–ª–µ–∫—Å–µ–π", "–°—Ç–∏—Ä–∞—Ç—å - —ç—Ç–æ –∫–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è. –¢–µ–ø–ª–æ, –±–µ–ª—ã–π —à—É–º, –∞—Ä–æ–º–∞—Ç —Å–≤–µ–∂–µ—Å—Ç–∏...", [this]() {}},
            {"üíÉ –ù–∏–∫–∞", "–ü–æ–∫–∞ –±–µ–ª—å—ë –∫—Ä—É—Ç–∏—Ç—Å—è, —è –ø–æ–π–¥—É –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É—é –±–∞—á–∞—Ç—É!", [this]() {}},
            {"üë®‚Äçüíº –ê—Ä—Ç—ë–º", "–Ø –ø—Ä–∏—à—ë–ª —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ù–∞–¥–µ—é—Å—å, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–Ω—è–ª –º–æ—é –º–∞—à–∏–Ω–∫—É!", [this]() {}},
            {"üßï –ê–º–∏–Ω–∞", "–í–æ–¥–∞ –ø–∞—Ö–Ω–µ—Ç –∂–∞—Å–º–∏–Ω–æ–º? –ò–ª–∏ —ç—Ç–æ –º–æ–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Å–Ω–æ–≤–∞ –ø—Ä–æ–ª–∏–ª—Å—è...", [this]() {}},
            {"üë®‚Äçüç≥ –ü–∞–≤–µ–ª", "–®–µ—Ñ-–ø–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –≥—Ä—è–∑–Ω—ã–π —Ñ–∞—Ä—Ç—É–∫!", [this]() {}},
            {"üë©‚Äçüé§ –õ–∞–Ω–∞", "–ë–µ–ª—å—ë –ø–æ—Å—Ç–∏—Ä–∞—é - –∏ —Å—Ä–∞–∑—É –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏—é. –ë–∞—Ä–∞–±–∞–Ω—ã –Ω–µ –∂–¥—É—Ç!", [this]() {}},
            {"üë®‚Äçüåæ –ù–∏–∫–æ–ª–∞–π", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–≤–æ–∑, –ø–æ—Ç–æ–º —Å—Ç–∏—Ä–∫–∞... –•–æ—Ä–æ—à–æ, —á—Ç–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ!", [this]() {}},
            {"üë©‚Äçüíª –í–µ—Ä–∞", "–°—Ç–∏—Ä–∞—é –Ω–æ—á—å—é, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –æ—Ç –∫–æ–¥–∞. –ù–∞–¥–µ—é—Å—å, —Å–æ—Å–µ–¥–∏ –ø–æ–π–º—É—Ç...", [this]() {}},
            {"üßô‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–∏—Å–ª–∞–≤", "–Ø –∑–∞—á–∞—Ä–æ–≤–∞–ª –Ω–æ—Å–∫–∏ –æ—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏!", [this]() {}},
            {"ü¶∏‚Äç‚ôÄÔ∏è –ö–∏—Ä–∞", "–ú–æ–π –∫–æ—Å—Ç—é–º —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è –Ω–µ–ª—å–∑—è —Å—É—à–∏—Ç—å –≥–æ—Ä—è—á–∏–º –≤–æ–∑–¥—É—Ö–æ–º. –û–Ω... —Å–∂–∏–º–∞–µ—Ç—Å—è.", [this]() {}},
            {"üé≠ –†–æ–º–∞–Ω", "–ö–æ—Å—Ç—é–º—ã –¥–ª—è —Å–ø–µ–∫—Ç–∞–∫–ª—è –¥–æ–ª–∂–Ω—ã —Å–∏—è—Ç—å. –ö–∞–∫ –∏ –∞–∫—Ç—ë—Ä—ã.", [this]() {}},
            {"üë®‚ÄçüöÄ –Æ—Ä–∏–π", "–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç–∏ –¥–∞–∂–µ —Ñ–æ—Ä–º–∞ –ø–∞—Ö–Ω–µ—Ç –∑–≤—ë–∑–¥–∞–º–∏.", [this]() {}},
            {"üßí –¢–∏–º—É—Ä", "–ú–∞–º–∞ –≤–µ–ª–µ–ª–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å. –Ø —Å–∞–º –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å...", [this]() {}},
            {"üë©‚Äçüåæ –î–∞—Ä—å—è", "–° –≥—Ä—è–¥–∫–∏ ‚Äî –≤ –±–∞—Ä–∞–±–∞–Ω. –í—Å—ë –∫–∞–∫ –ø–æ –ø–ª–∞–Ω—É.", [this]() {}},
            {"üê∂ –ë–æ–Ω—è", "–ì–∞–≤! –ü—Ä–∏–Ω—ë—Å –æ–¥–µ—è–ª–æ. –û–Ω–æ —Å–∞–º–æ –ø—Ä–∏—à–ª–æ –≤ –≥—Ä—è–∑—å, —á–µ—Å—Ç–Ω–æ!", [this]() {}},
            {"üë®‚Äçüè´ –ï–≤–≥–µ–Ω–∏–π", "–ü—Ä–µ–∂–¥–µ —á–µ–º —Å—Ç–∏—Ä–∞—Ç—å, –ø—Ä–æ–≤–µ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ç–∫–∞–Ω–∏.", [this]() {}},
            {"üë©‚Äçüöí –ö–∞—Ç—è", "–§–æ—Ä–º–∞ –ø–æ–∂–∞—Ä–Ω–∞—è, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä—è—á–∞—è... –æ—Ç —Å—Ç–∏—Ä–∫–∏!", [this]() {}}

        };          

        if (clock.quality_customers_day == 0) {
            std::cout << "–ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –ø—Ä–∞—á–µ—á–Ω–æ–π –Ω—É–∂–Ω–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ." << std::endl;
        }
        else {
            std::random_device rd;
            std::mt19937 gen(rd());
            std::uniform_int_distribution<> distrib(0, customer.size() - 1);

            int index = distrib(gen);

            const Customers& c = customer[index];

            clock.decrementCustomerCount();
            std::cout << clock.quality_customers_day << std::endl;

            std::cout << "–ö—Ç–æ-—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∞—á–µ—á–Ω—É—é...\n";

            std::cout << termcolor::yellow << c.name << ": " << termcolor::reset;
            if (!c.text.empty()) { 
                slowPrint(c.text);
            }
            std::cout << std::endl;

            c.interaction();
        }

    }

    void give_clothes() {
        float salary;
        std::string give;
        while (true) {
            std::cout << termcolor::green << "[–æ—Ç–¥–∞—Ç—å –æ–¥–µ–∂–¥—É(–¥–∞/–Ω–µ—Ç)]: " << termcolor::reset;
            std::cin >> give;
            std::cout << std::endl;
            if (give == "–Ω–µ—Ç") {
                std::cout << "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –ª—é–±—è—Ç –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å! –û–Ω–∏ –∑–∞–ø–ª–∞—Ç—è—Ç –º–µ–Ω—å—à–µ" << std::endl;
                fine += 0.5f;
                std::cout << (price_washing - fine);
                give_clothes();

            }
            else if (give == "–¥–∞") {
                good_day();
             
                if (fine == 0.0f) {
                    salary = price_washing * amount_clothing_clean;
                    questFlags.get("sofia_bear") ? salary += 1 : salary;
                }
                else {
                    salary = (price_washing - fine) * amount_clothing_clean;
                }
                wallet += salary;
                amount_clothing_clean = 0;
                std::cout << "–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª " << termcolor::yellow << salary << "$" << termcolor::reset << std::endl;
                list_activity();
            }
                break;
            }
        }

    void good_day() {
        std::string wish;
        std::cout << "[–ø–æ–∂–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—èüåû]" << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;
        
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        std::getline(std::cin, wish); // —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        
        std::cout << std::endl;
        std::string user = "üë§" + us_name + ": " + "—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû";
        slowPrint(user);

        if (wish != " ") {
            std::cout << "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—Å–Ω–∞—á–∞–ª–æ space, –ø–æ—Ç–æ–º enter)" << std::endl;
            good_day();
        }
    }

    void process_washing() {
        std::cout << "–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ä–∫–∏..." << std::endl;
        for (int i = 0; i < 10; ++i) {
            Sleep(1500);
            std::cout << "‚ñà ";
        }
        if (questFlags.get("sofia_bear"))
            std::cout << termcolor::green << "–ë–æ–Ω—É—Å –æ—Ç —Å—Ç–∏—Ä–∫–∏ –º–µ–¥–≤–µ–¥—è + 1$" << termcolor::reset << std::endl;
            
        else 
            std::cout << "\n–û–¥–µ–∂–¥–∞ –ø–æ—Å—Ç–∏—Ä–∞–Ω–∞!" << std::endl;
        give_clothes();
    }
    
    void process_drying() {
        std::cout << "–ü—Ä–æ—Ü–µ—Å—Å —Å—É—à–∫–∏..." << std::endl;
        for (int i = 0; i < 10; ++i) {
            Sleep(1500);
            std::cout << "‚ñä ";
        }
        std::cout << "\n–û–¥–µ–∂–¥–∞ –≤—ã—Å—É—à–µ–Ω–∞!" << std::endl;
    }
    
    void showMaykaRetroBanner() {
        std::string banner = R"(
                                                                  .---.        ____      ___    _ ,---.   .--. ______     .-------. 
                      | ,_|      .'  __ `. .'   |  | ||    \  |  ||    _ `''. |  _ _   \      \   \   /  / 
                    ,-./  )     /   '  \  \|   .'  | ||  ,  \ |  || _ | ) _  \| ( ' )  |       \  _. /  '  
                    \  '_ '`)   |___|  /  |.'  '_  | ||  |\_ \|  ||( ''_'  ) ||(_ o _) /        _( )_ .'   
                     > (_)  )      _.-`   |'   ( \.-.||  _( )_\  || . (_) `. || (_,_).' __  ___(_ o _)'    
                    (  .  .-'   .'   _    |' (`. _` /|| (_ o _)  ||(_    ._) '|  |\ \  |  ||   |(_,_)'     
                     `-'`-'|___ |  _( )_  || (_ (_) _)|  (_,_)\  ||  (_.\.' / |  | \ `'   /|   `-'  /      
                      |        \\ (_ o _) / \ /  . \ /|  |    |  ||       .'  |  |  \    /  \      /       
                      `--------` '.(_,_).'   ``-'`-'' '--'    '--''-----'`    ''-'   `'-'    `-..-'        
                                                                                       
        )";
        std::cout << "\033[1;36m"; // –ì–æ–ª—É–±–æ–π —Å—Ç–∏–ª—å
        slowPrint(banner, 1); 
        std::cout << "\033[0m\n";
    }

    bool baner = true;
    std::pair<std::map<int, std::string>, std::map<int, std::function<void()>>> getAvailableActions() {
        std::map<int, std::string> activities;
        std::map<int, std::function<void()>> actions;
           
        int nextIndex = 1;
        activities[nextIndex] = "–û–±—É—á–µ–Ω–∏–µ";
        actions[nextIndex++] = [this]() {
            std::ifstream file("instruction.txt");
            if (file.is_open()) {
                std::string line;
                while (std::getline(file, line)) {
                    std::cout << line << std::endl;
                }
                file.close();
            }
            std::cout << std::endl;
            };

        activities[nextIndex] = "–°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É üëï";
        actions[nextIndex++] = [this]() {
            while (amount_clothing_dirty > 0 && level_serviceability > 0) {
                code_for_washing();
                clock.advanceTime(2, 0);
                amount_clothing_clean = amount_clothing_dirty;
                amount_clothing_dirty = 0;
                level_serviceability -= 1;
                process_washing();

                give_clothes();
            }
            if(amount_clothing_dirty == 0) 
                std::cout << "–£ —Ç–µ–±—è –Ω–µ—Ç —á—Ç–æ —Å—Ç–∏—Ä–∞—Ç—å!" << std::endl;
            if (level_serviceability == 0) {
                std::cout << termcolor::italic << "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–Ω–∞!\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ—á–∏–Ω–∫–∏ 1$" << termcolor::reset << std::endl;
                
                std::string pay;
                
                std::cout << "[–∑–∞–ø–ª–∞—Ç–∏—Ç—å 1$]" << termcolor::blue << "(space + enter)" << termcolor::reset;
                
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

                std::getline(std::cin, pay);

                wallet -= 1;
                level_serviceability = 5;
                std::cout << termcolor::italic << "–ó–∞–ø–ª–∞—á–µ–Ω–æ 1$\n–£—Ä–æ–≤–µ–Ω—å –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: " << level_serviceability << termcolor::reset << std::endl;
            }
        };


        activities[nextIndex] = "–ñ–¥–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üëÄ";
        actions[nextIndex++] = [this]() {
            std::cout << "–ü–æ—Ä–æ–π –≤—Ä–µ–º—è —Å–ª–æ–≤–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!" << std::endl;
            if (iscamera) {
                WatchingBirds birds;
                birds.random_meet();
            }
            customers();
            amount_clothing_dirty += 1;
            clock.advanceTime(1, 0);
            };

        activities[nextIndex] = "–°–ª–æ–∂–∏—Ç—å –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üåª";
        actions[nextIndex++] = [this]() {
            
            if (sock_hunt == true) {
                std::cout << termcolor::bright_cyan << "–ù–æ—Å–æ–∫ –Ω–∞–π–¥–µ–Ω!" << termcolor::reset << std::endl;
                has_found_sock_vladimir = true;

                std::cout << termcolor::bright_grey << "–û—Ç–Ω–µ—Å—Ç–∏ –Ω–æ—Å–æ–∫ –í–ª–∞–¥–∏–º–∏—Ä—É" << termcolor::reset;
                wait_for_enter();
         
                std::this_thread::sleep_for(std::chrono::seconds(1));
                slowPrint("üßî –í–ª–∞–¥–∏–º–∏—Ä: –Ø —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª—Å—è —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ—â–∞–Ω–∏–µ. –ê —Ç—É—Ç ‚Äî —Ç–∞–∫–æ–π –ø–æ–≤–æ—Ä–æ—Ç!");
            }
            else {
                std::cout << "–í—Å–µ —Å–ª–æ–∂–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ!" << std::endl;
                clock.advanceTime(0, 30);
            }            
        };

        activities[nextIndex] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è üí°";
        actions[nextIndex++] = [this]() {

            if (assigments.empty()) {
                std::cout << "üß∫ ‚Äî –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ" << std::endl;
            }
            else {
                printAssigm();
            }
        };

        activities[nextIndex] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ üí∞";
        actions[nextIndex++] = [this]() {
            if (wallet != 0)
                std::cout << "–£ —Ç–µ–±—è " << termcolor::yellow << wallet << "$" << termcolor::reset << std::endl;
            else
                std::cout << "–î–∞ –∑–¥–µ—Å—å –æ–¥–Ω–∏ –º—É—Ö–∏!ü™∞üï∏Ô∏è" << std::endl; 
            };

        if (clock.day >= 3) {
            activities[nextIndex] = "–°—É—à–∏—Ç—å –æ–¥–µ–∂–¥—É üçÉ";
            actions[nextIndex++] = [this]() {
                std::cout << "–ï—Å–ª–∏ –±—ã –Ω–µ —Å—É—à–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∫–∞,\n–æ–¥–µ–∂–¥–∞ –±—ã –¥—Ä—É–∂–∏–ª–∞ —Å –≤–µ—Ç—Ä–æ–º!" << std::endl;
                clock.advanceTime(2, 0);
                };
        }

        if (is_village) {
            activities[nextIndex] = "–ü–æ–π—Ç–∏ –≤ –¥–µ—Ä–µ–≤–Ω—é";
            actions[nextIndex++] = [this]() {
                Village village;
                village.message_village();
                village.list_activity_village();
                };
        }
       
        int exitIndex = static_cast<int>(activities.size()) + 1;
        activities[exitIndex] = "–ù–∏—á–µ–≥–æ";
        actions[exitIndex++] = []() {
            std::cout << "–•–æ—Ä–æ—à–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!üåû\n";
            };

        if (clock.isNight()) {
            int sleepIndex = static_cast<int>(activities.size()) + 1;
            activities[exitIndex] = "–ü–æ–π—Ç–∏ —Å–ø–∞—Ç—å üåô";
            actions[exitIndex++] = [this]() {
                clock.go_to_bed();
                list_activity();
                };
        }

        return {activities, actions};

    }

    void list_activity() {
        bool running = true;
        while (running) {
            special_events();
            clock.showTime();
            clock.getCustomerCount();

            auto actionsPair = getAvailableActions();
            auto activities = actionsPair.first;
            auto actions = actionsPair.second;
            int exitIndex = static_cast<int>(activities.size());

            for (const auto& pair : activities) {
                std::cout << pair.first << " " << pair.second << std::endl;
            }
            
            int choice;
            std::cout << "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? ";
            std::cin >> choice;
            std::cout << std::endl;

            if (actions.count(choice)) {
                actions[choice]();
                if (choice == exitIndex) {
                    running = false;
                }
            }
            else {
                std::cout << "–û–ô, —Ç—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!" << std::endl;
            }
           
        }
    }
    
    void special_events() {
        switch (clock.day) {
        case 5: {
            if (!has_met_vanessa){
                std::cout << termcolor::bright_blue << "üëµ –í–∞–Ω–µ—Å—Å–∞: " << termcolor::reset;
            std::string message = "–ü—Ä–∏–≤–µ—Ç, " + us_name + ", —è —Ç—É—Ç —É–±–∏—Ä–∞–ª–∞—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ –Ω–∞—à–ª–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç.\n–ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!";
            slowPrint(message, 40);

            std::cout << "\n–ü–æ–ª—É—á–µ–Ω " << termcolor::bright_cyan << "[—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç]\n" << termcolor::reset << std::endl;
            iscamera = true;

            Sleep(100);
            std::cout << termcolor::italic << "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –º–∏—Ä –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏–∏\n" << termcolor::reset;
        }
            break;
        }
        case 2: {
            if (!has_met_mustafa) {
                std::cout << termcolor::bright_blue << "üë¥ –ú—É—Å—Ç–∞—Ñ–∞: " << termcolor::reset;
                std::string message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –í–∏–∂—É, —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –ù–∞—à–∞ –¥–µ—Ä–µ–≤–Ω—è –ö–∞—Ç–∞–ª–∏–Ω —Ö–æ—Ç—å –∏ –º–∞–ª–∞, –¥–∞ —É—é—Ç–æ–º —Å–ª–∞–≤–∏—Ç—Å—è.\n–ó–∞–≥–ª—è–Ω–∏ –≤ –≥–æ—Å—Ç–∏ ‚Äî –ø–æ–≤–µ–¥–∞—é —Ç–µ–±–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ –∑–¥–µ—à–Ω–∏—Ö –º–µ—Å—Ç–∞—Ö, –∞ –º–æ—è –í–∞–Ω–µ—Å—Å–∞ –ø–∏—Ä–æ–≥ –∏—Å–ø–µ—á—ë—Ç –∫ —á–∞—é.\n"
                    "–ñ–∏–≤—ë–º –º—ã –Ω–µ–ø–æ–¥–∞–ª—ë–∫—É, —Ç–∞–∫ —á—Ç–æ –µ—â—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è!\n";
                slowPrint(message);

                Sleep(100);
                is_village = true;
                std::cout << termcolor::italic << "–û—Ç–∫—Ä—ã—Ç–∞ –¥–µ—Ä–µ–≤–Ω—è\n" << termcolor::reset;
                has_met_mustafa = true;
                
            }
            break;
        }
        case 7: {
            if (!has_met_ayzuk) {
                std::cout << termcolor::bright_blue << "üë¶ –ê–π–∑–∏–∫: " << termcolor::reset;
                std::string message = "–≠—ç—ç... –∑–¥—Ä–∞—Å—å—Ç–µ! –£ –º–µ–Ω—è —Ç—É—Ç, –Ω—É... –æ—á–µ–Ω—å –¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –¢–æ–ª—å–∫–æ –º–∞–º–µ –Ω–∏ —Å–ª–æ–≤–∞, –ª–∞–¥–Ω–æ?\n"
                    "–ö–æ—Ä–æ—á–µ, –º–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω–∞–¥–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å... –¥–≤–æ–π–∫—É –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞! –í –∂—É—Ä–Ω–∞–ª–µ '–ú–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏' –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –ù—É —è –∏ –ø–æ–¥—É–º–∞–ª ‚Äî –∞ –≤–¥—Ä—É–≥?";
                slowPrint(message, 50);

                std::string diary;
                std::cout << "\n[–í–∑—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫]" << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;

                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

                std::getline(std::cin, diary);

                std::cout << termcolor::italic << "\n–ü–æ–ª—É—á–µ–Ω –¥–Ω–µ–≤–Ω–∏–∫ –ê–π–∑–∏–∫–∞" << termcolor::reset << std::endl;

                process_washing();

                std::cout << termcolor::bright_blue << "\nüë¶ –ê–π–∑–∏–∫: " << termcolor::reset;
                std::string message1 = "\n–û–≥–æ! –ü–æ–ª—É—á–∏–ª–æ—Å—å?! –¢—ã –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞, —á–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ!\n"
                    "–¢–µ–ø–µ—Ä—å –º–∞–º–∞ —Ç–æ—á–Ω–æ –Ω–µ —É–∑–Ω–∞–µ—Ç... –ù–∞–≤–µ—Ä–Ω–æ–µ. –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!\n"
                    "–ï—Å–ª–∏ —á—Ç–æ ‚Äî —è –≤ –¥–æ–ª–≥—É –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å. –£ –º–µ–Ω—è –µ—â—ë –∫–æ–µ-—á—Ç–æ –Ω–∞–¥–æ... —ç—ç—ç... –ø–æ—á–∏–Ω–∏—Ç—å.";
                slowPrint(message1);
                std::cout << std::endl;
                good_day();
            }
        }
        }
    }

    void code_for_washing() {
        int number_errors = 0;
        
        while (number_errors < 2) {
            std::cout << "–í–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: ";
            int code;
            std::cin >> code;
            
            if (code == 1010) {
                if (questFlags.get("sofia_bear")) {
                    std::cout << termcolor::green << "–ú–∏—à–∫–∞ –≤ —Å—Ç–∏—Ä–∫–µ üß∏" << termcolor::reset << std::endl;

                }
                else {
                    std::cout << termcolor::green << "–û–¥–µ–∂–¥–∞ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è!" << termcolor::reset << std::endl;
                }
                  break;
              }

            else {
                number_errors++;
                std::cout << termcolor::bright_red << "–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π!" << termcolor::reset << std::endl;

                std::string try_again;
                    while(true){
                    std::cout << "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ?(–¥–∞/–Ω–µ—Ç) ";
                    std::cin >> try_again;
    
                    if (try_again == "–¥–∞")
                        break; 
                    else if (try_again == "–Ω–µ—Ç") {
                        list_activity();
                        return;
                    }
                    else {
                        std::cout << "–ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!";
                    }
                    }
                  }
                }
        if (number_errors == 2) {
            std::cout << termcolor::yellow << "–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–ª—è–Ω–∏ –≤ –æ–±—É—á–µ–Ω–∏–µ üåº" << termcolor::reset << std::endl;
            list_activity();
        }
            
        
    }

                                    /*–°—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∏—Ä–∞–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –∏ —Å—É—à–∏–ª—å–Ω–æ–π
                                    [–ø—É—Å—Ç–∞—è], [–∑–∞–≥—Ä—É–∂–µ–Ω–∞], [—Å—Ç–∏—Ä–∞–µ—Ç—Å—è/—Å—É—à–∏—Ç—Å—è], [–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞(—à–∞–Ω—Å)]

                                    –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å –º–∞—à–∏–Ω—ã
*/
};


int main() {
    SetConsoleOutputCP(65001); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Æ–Ω–∏–∫–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ emoji
    srand(time(NULL));
    
    std::string us_name;

    GameClock clock;
    
    clock.random_qual_custom();
    clock.getCustomerCount();
    
    
    std::cout << termcolor::bright_magenta << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∞—á–µ—á–Ω—É—é!üß∫\n–ó–¥–µ—Å—å –≤—Å—ë –∫—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ —á–∏—Å—Ç–æ—Ç—ã –∏ —É—é—Ç–∞\n–ü—Ä–æ—á—Ç–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–º–æ–≥–∏ –ø–µ—Ä–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å!üåûü´ß\n\n" << termcolor::reset;
    
    std::cout << "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç: ";
    std::cin >> us_name;
    std::cout << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "<< us_name << std::endl;
    

    Laundry laundry(us_name, clock);
    laundry.list_activity();
       
    return 0;
}
