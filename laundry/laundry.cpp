#include <iostream>
#include <istream>
#include <windows.h>
#include <string>
#include <map>
#include <fstream>
#include "termcolor.hpp"
#include <time.h>
#include <vector>
#include <ctime>
#include <chrono>
#include <thread>
#include <functional>
#include <algorithm>
#include <random>
#include <limits>
#undef max


void slowPrint(const std::string& text, int delay = 10) {
    for (char c : text) {
        std::cout << c << std::flush;
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
    }
    std::cout << std::endl;
}

class GameClock {
private:
    int hour;
    int minutes;
    int day;
public:
    GameClock() : hour(8), minutes(00), day(1) {} // –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 6 —É—Ç—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è

    void advanceTime(int hourToAdvance, int minutesToAdvance) {
        hour += hourToAdvance;
        minutes += minutesToAdvance;
        
        while (minutes >= 60) {
            hour += 1;
            minutes -= 60;
        }
        
        while (hour >= 24) {
            hour -= 24;
            //minutes -= 60;
            day++;
            std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
        }
    }

    void go_to_bed() {
        if (isNight()) {
            std::cout << "–¢–µ–±–µ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å!" << std::endl << "–ü–æ–π–¥–µ—à—å?(–¥–∞/–Ω–µ—Ç) ";
            std::string message;
            std::cin >> message;
            std::cout << std::endl;
            if (message == "–¥–∞") {
                hour = 8;
                minutes = 00;
                day++;
                std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
            }
            else if (message == "–Ω–µ—Ç") {
                while (hour >= 24) {
                    std::cout << "–¢—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏üåô!";
                    hour = 8;
                    minutes = 00;
                    day++;
                    std::cout << termcolor::magenta << "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å! –î–µ–Ω—å " << day << termcolor::reset << std::endl;
                }
            }
        }
    }

    void showTime() const {
        if (minutes > 9)
            std::cout << "–î–µ–Ω—å " << day << ", " << hour << ":" << minutes << std::endl << std::endl;
        else
            std::cout << "–î–µ–Ω—å " << day << ", " << hour << ":" << "0" << minutes << std::endl << std::endl;
    }

    bool isDaytime() const {
        return hour >= 6 && hour < 20;
    }

    bool isNight() const {
        return !isDaytime();
    }
    
    friend class Laundry;

};


class WatchingBirds {
protected:
    int quality_birds;
    
    
public:
    void random_meet() {
        int num = 1 + std::rand() % 100;
        if (num <= 10) {
            std::cout << "–¢–∏—Ö–æ: –ü—Ç–∏—á–∫–∞ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ!" << std::endl;
            take_photo();
        }
        else {
            std::cout << "–ù–µ–±–æ —á–∏—Å—Ç–æ–µ... –ü—Ç–∏—Ü –Ω–µ –≤–∏–¥–Ω–æ." << std::endl;
        }
     }
    void take_photo() {
        std::string message;
        std::cout << "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ?" << termcolor::cyan << "(–¥–∞ / –Ω–µ—Ç) " << termcolor::reset;
        std::cin >> message;
        std::cout << std::endl;
        if (message == "–¥–∞") {
            random_bird();
            
        }
    }
    void random_bird() {
        struct Bird {
            std::string name;
            std::string rarity;
            //int age;
        };

        std::vector<Bird> birds = {
            {"–í–æ—Ä–æ–±–µ–π", "–æ–±—ã—á–Ω–∞—è"},
            {"–°–∏–Ω–∏—Ü–∞", "–æ–±—ã—á–Ω–∞—è"},
            {"–î—è—Ç–µ–ª", "—Ä–µ–¥–∫–∞—è"},
            {"–§–∏–ª–∏–Ω", "—Ä–µ–¥–∫–∞—è"},
            {"–§–µ–Ω–∏–∫—Å", "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è"},
            {"–¢—Ä—ë—Ö–≥–ª–∞–∑—ã–π –≤–æ—Ä–æ–Ω", "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è"},
            {"–ñ–∞—Ä-–ø—Ç–∏—Ü–∞", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"},
            {"–ì–∞—Ä–ø–∏—è", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"}
        };

        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è (—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â§ 100)
        std::map<std::string, int> rarity_weight = {
            {"–æ–±—ã—á–Ω–∞—è", 65},
            {"—Ä–µ–¥–∫–∞—è", 20},
            {"—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è", 10},
            {"–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 5},
        };

        int roll = std::rand() % 100;

        std::string selected_rarity;
        int threshold = 0;

        for (const auto& pair : rarity_weight) {
            const std::string& rarity = pair.first;
            int weight = pair.second;
            
            threshold += weight;
            if (roll < threshold) {
                selected_rarity = rarity;
                break;
            }
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ç–∏—Ü –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        std::vector<Bird> filtered;
        for (const auto& bird : birds) {
            if (bird.rarity == selected_rarity)
                filtered.push_back(bird);
        }


        // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ç–∏—Ü—ã –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        int index = std::rand() % filtered.size();
        Bird chosen = filtered[index];

        std::cout << "–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø—Ç–∏—Ü–∞: " << chosen.name << " [";
        colored_rarity(chosen.rarity);
        std::cout << "]" << std::endl;
        quality_birds += 1;


    }
    void colored_rarity(const std::string& rarity) {
        if (rarity == "–æ–±—ã—á–Ω–∞—è")
            std::cout << termcolor::green;
        else if(rarity == "—Ä–µ–¥–∫–∞—è")
            std::cout << termcolor::yellow;
        else if (rarity == "—Å—É–ø–µ—Ä-—Ä–µ–¥–∫–∞—è")
            std::cout << termcolor::blue;
        else if (rarity == "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è")
            std::cout << termcolor::on_red;

        std::cout << rarity << termcolor::reset;
    }


       
};

class Laundry {
private:
    std::string us_name;
    int max_number_of_customers = 0, number_of_customers = 0, amount_clothing_dirty = 0, amount_clothing_clean = 0, wallet = 0;
    float price_washing = 2, price_drying = 1, fine = 0; // $
    // —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫-–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å (max_number_of_customers)
    // —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–∞–º –æ–±—Å–ª—É–∂–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (number_of_customers)

protected:
    bool iscamera;
public:
    GameClock clock;
    Laundry(const std::string& name) : us_name(name), iscamera(false), clock() {}


    void check_day() {
        if (clock.day < 5) {
            iscamera = false;
        }
    }

    void customers() {
        struct Customers {
            std::string name;
            std::string text;
        };

        std::vector<Customers> customer = {
            {"üë©‚Äçü¶∞ –û–ª—å–≥–∞", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –∑–¥–µ—Å—å –±–µ–ª—å—ë —Å –æ—Ç–ø—É—Å–∫–∞ –ø–µ—Å–æ–∫ - –ø–æ–≤—Å—é–¥—É!"},
            {"üßî –í–ª–∞–¥–∏–º–∏—Ä", "–ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è –º–∞—à–∏–Ω–∫–∞ –Ω–µ —Å—ä–µ—Å—Ç –µ—â—ë –æ–¥–∏–Ω –Ω–æ—Å–æ–∫..."},
            {"üëß –°–æ—Ñ–∏—è", "–ú–∞–º, –∞ –º–æ–∂–Ω–æ —Å—Ç–∏—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫–∏?üß∏"},
            {"üßë‚Äçüîß –ò–≥–æ—Ä—å", "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –∑–∞–±—ã–ª –∫–ª—é—á–∏ –æ—Ç —Å—É—à–∏–ª–∫–∏..."},
            {"üëµ –ë–∞–±—É—à–∫–∞ –ó–∏–Ω–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—Å—ë –∫–∏–ø—è—Ç–∫–æ–º, –ø–æ—Ç–æ–º –ø–æ–ª–æ—Å–∫–∞—Ç—å - –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞!"},
            {"üìö –ú–∞—Ä–∫", "–Ø –ø–æ–∫–∞ –ø–æ—Å—Ç–∏—Ä–∞—é, –∑–∞–æ–¥–Ω–æ –¥–∏–ø–ª–æ–º –Ω–∞–ø–∏—à—É..."},
            {"üé® –ê–Ω–Ω–∞", "–ö—Ç–æ-—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª —Ä–æ–∑–æ–≤—ã–π –ø–ª–∞—Ç–æ–∫ –≤ –≥–æ—Ä–æ—à–µ–∫? üéÄ"},
            {"üê± –ö–æ—Ç –ë–æ—Ä–∏—Å", "–ú—è—É! –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –º–æ–π –ø–ª–µ–¥, –æ–Ω –ø–∞—Ö–Ω–µ—Ç –º–Ω–æ—é!"},
            {"üßò‚Äç‚ôÇÔ∏è –ê–ª–µ–∫—Å–µ–π", "–°—Ç–∏—Ä–∞—Ç—å - —ç—Ç–æ –∫–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è. –¢–µ–ø–ª–æ, –±–µ–ª—ã–π —à—É–º, –∞—Ä–æ–º–∞—Ç —Å–≤–µ–∂–µ—Å—Ç–∏..."},
            {"üíÉ –ù–∏–∫–∞", "–ü–æ–∫–∞ –±–µ–ª—å—ë –∫—Ä—É—Ç–∏—Ç—Å—è, —è –ø–æ–π–¥—É –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É—é –±–∞—á–∞—Ç—É!"},
            {"üë®‚Äçüíº –ê—Ä—Ç—ë–º", "–Ø –ø—Ä–∏—à—ë–ª —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ù–∞–¥–µ—é—Å—å, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–Ω—è–ª –º–æ—é –º–∞—à–∏–Ω–∫—É!"},
            {"üßï –ê–º–∏–Ω–∞", "–í–æ–¥–∞ –ø–∞—Ö–Ω–µ—Ç –∂–∞—Å–º–∏–Ω–æ–º? –ò–ª–∏ —ç—Ç–æ –º–æ–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Å–Ω–æ–≤–∞ –ø—Ä–æ–ª–∏–ª—Å—è..."},
            {"üë®‚Äçüç≥ –ü–∞–≤–µ–ª", "–®–µ—Ñ-–ø–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –≥—Ä—è–∑–Ω—ã–π —Ñ–∞—Ä—Ç—É–∫!"},
            {"üë©‚Äçüé§ –õ–∞–Ω–∞", "–ë–µ–ª—å—ë –ø–æ—Å—Ç–∏—Ä–∞—é - –∏ —Å—Ä–∞–∑—É –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏—é. –ë–∞—Ä–∞–±–∞–Ω—ã –Ω–µ –∂–¥—É—Ç!"},
            {"üë®‚Äçüåæ –ù–∏–∫–æ–ª–∞–π", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–≤–æ–∑, –ø–æ—Ç–æ–º —Å—Ç–∏—Ä–∫–∞... –•–æ—Ä–æ—à–æ, —á—Ç–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ!"},
        };

        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> distrib(0, customer.size() - 1);
        int index = distrib(gen);

        const Customers& c = customer[index];

        std::cout << termcolor::yellow << c.name << ": " << termcolor::reset;
        slowPrint(c.text);
        std::cout << std::endl;
    }


    void give_clothes() {
        int salary;
        std::string give;
        while (true) {
            std::cout << termcolor::green << "[–æ—Ç–¥–∞—Ç—å –æ–¥–µ–∂–¥—É(–¥–∞/–Ω–µ—Ç)]: " << termcolor::reset;
            std::cin >> give;
            std::cout << std::endl;
            if (give == "–Ω–µ—Ç") {
                std::cout << "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –ª—é–±—è—Ç –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å! –û–Ω–∏ –∑–∞–ø–ª–∞—Ç—è—Ç –º–µ–Ω—å—à–µ" << std::endl;
                fine += 0.5f;

            }
            else if (give == "–¥–∞") {
                good_day();
             
                if (fine == 0.0f) {
                    salary = price_washing * amount_clothing_clean;
                }
                else {
                    salary = (price_washing - fine) * amount_clothing_clean;
                }
                wallet += salary;
                std::cout << "–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª " << termcolor::yellow << salary << "$" << termcolor::reset << std::endl;
            }
                break;
            }
        }


    void good_day() {
        std::string wish;
        std::cout << "[–ø–æ–∂–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—èüåû]" << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;
        
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');


        std::getline(std::cin, wish); // —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        
        std::cout << std::endl;
        std::string user = "üë§" + us_name + ": " + "—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû";
        slowPrint(user);

        if (wish != " ") {
            std::cout << "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—Å–Ω–∞—á–∞–ª–æ space, –ø–æ—Ç–æ–º enter)" << std::endl;
            good_day();
        }
    }

    std::pair<std::map<int, std::string>, std::map<int, std::function<void()>>> getAvailableActions() {
        std::map<int, std::string> activities;
        std::map<int, std::function<void()>> actions;

        activities[1] = "–û–±—É—á–µ–Ω–∏–µ";
        actions[1] = [this]() {
            std::ifstream file("instruction.txt");
            if (file.is_open()) {
                std::string line;
                while (std::getline(file, line)) {
                    std::cout << line << std::endl;
                }
                file.close();
            }
            std::cout << std::endl;
            };

        activities[2] = "–°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É üëï";
        actions[2] = [this]() {
            if (amount_clothing_dirty > 0) {
                code_for_washing();
                clock.advanceTime(2, 0);
                amount_clothing_clean = amount_clothing_dirty;
                amount_clothing_dirty = 0;
                std::cout << "–û–¥–µ–∂–¥–∞ –ø–æ—Å—Ç–∏—Ä–∞–Ω–∞!" << std::endl;

                give_clothes();
            }
            else {
                std::cout << "–£ —Ç–µ–±—è –Ω–µ—Ç —á—Ç–æ —Å—Ç–∏—Ä–∞—Ç—å!" << std::endl;
            }
        };


        activities[3] = "–ñ–¥–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üëÄ";
        actions[3] = [this]() {
            std::cout << "–ü–æ—Ä–æ–π –≤—Ä–µ–º—è —Å–ª–æ–≤–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!" << std::endl;
            if (iscamera) {
                WatchingBirds birds;
                birds.random_meet();
            }
            customers();
            amount_clothing_dirty += 1;
            clock.advanceTime(1, 0);
            };

        activities[4] = "–°–ª–æ–∂–∏—Ç—å –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üåª";
        actions[4] = [this]() {
            std::cout << "–í—Å–µ —Å–ª–æ–∂–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ!" << std::endl;
            clock.advanceTime(0, 30);
            };

        activities[5] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ üí∞";
        actions[5] = [this]() {
            if (wallet != 0)
                std::cout << "–£ —Ç–µ–±—è " << termcolor::yellow << wallet << "$" << termcolor::reset << std::endl;
            else
                std::cout << "–î–∞ –∑–¥–µ—Å—å –æ–¥–Ω–∏ –º—É—Ö–∏!ü™∞üï∏Ô∏è" << std::endl; 
            };

        if (clock.day >= 3) {
            activities[6] = "–°—É—à–∏—Ç—å –æ–¥–µ–∂–¥—É üçÉ";
            actions[6] = [this]() {
                std::cout << "–ï—Å–ª–∏ –±—ã –Ω–µ —Å—É—à–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∫–∞,\n–æ–¥–µ–∂–¥–∞ –±—ã –¥—Ä—É–∂–∏–ª–∞ —Å –≤–µ—Ç—Ä–æ–º!" << std::endl;
                clock.advanceTime(2, 0);
                };
        }



        int exitIndex = static_cast<int>(activities.size()) + 1;
        activities[exitIndex] = "–ù–∏—á–µ–≥–æ";
        actions[exitIndex] = []() {
            std::cout << "–•–æ—Ä–æ—à–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!üåû\n";
            };

        if (clock.isNight()) {
            
            int sleepIndex = static_cast<int>(activities.size()) + 1;
            activities[sleepIndex] = "–ü–æ–π—Ç–∏ —Å–ø–∞—Ç—å üåô";
            actions[sleepIndex] = [this]() {
                clock.go_to_bed();
                };
        }

        return {activities, actions};

    }


    void list_activity() {
        bool running = true;
        while (running) {
            special_events();
            clock.go_to_bed();
            clock.showTime();

            auto actionsPair = getAvailableActions();
            auto activities = actionsPair.first;
            auto actions = actionsPair.second;
            int exitIndex = static_cast<int>(activities.size());



            for (const auto& pair : activities) {
                std::cout << pair.first << " " << pair.second << std::endl;
            }
            
            int choice;
            std::cout << "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? ";
            std::cin >> choice;
            std::cout << std::endl;

            if (actions.count(choice)) {
                actions[choice]();
                if (choice == exitIndex) {
                    running = false;
                }
            }
            else {
                std::cout << "–û–ô, —Ç—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!" << std::endl;
            }
           
        }
    }
    
    void special_events() {
        switch (clock.day) {
        case 5: {
            std::cout << termcolor::bright_blue << "üëµ –í–∞–Ω–µ—Å—Å–∞: " << termcolor::reset;
            std::string message = "–ü—Ä–∏–≤–µ—Ç, " + us_name + " —è —Ç—É—Ç —É–±–∏—Ä–∞–ª–∞—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ –Ω–∞—à–ª–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç.\n–ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!";
            std::cout << "–ü–æ–ª—É—á–µ–Ω " << termcolor::bright_cyan << '[' << "—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç" << ']' << termcolor::reset << std::endl;
            iscamera = true;

            slowPrint(message , 40);
            slowPrint("–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –º–∏—Ä –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏–∏");
        }
        }
    }

    void code_for_washing() {
        std::cout << "–í–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: ";
        int code;
        std::cin >> code;
        if (code != 1010) {
            std::cout << "–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π!";
        }
        else {
            std::cout << "–û–¥–µ–∂–¥–∞ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è!" << std::endl;
        }
    }

                                    /*–°—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∏—Ä–∞–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –∏ —Å—É—à–∏–ª—å–Ω–æ–π
                                    [–ø—É—Å—Ç–∞—è], [–∑–∞–≥—Ä—É–∂–µ–Ω–∞], [—Å—Ç–∏—Ä–∞–µ—Ç—Å—è/—Å—É—à–∏—Ç—Å—è], [–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞(—à–∞–Ω—Å)]

                                    –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å –º–∞—à–∏–Ω—ã

                                    */
};


int main() {
    SetConsoleOutputCP(65001); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Æ–Ω–∏–∫–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ emoji
    srand(time(NULL));
    
    std::cout << termcolor::bright_magenta << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∞—á–µ—á–Ω—É—é!üß∫\n–ó–¥–µ—Å—å –≤—Å—ë –∫—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ —á–∏—Å—Ç–æ—Ç—ã –∏ —É—é—Ç–∞\n–ü—Ä–æ—á—Ç–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–º–æ–≥–∏ –ø–µ—Ä–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å!üåûü´ß\n\n" << termcolor::reset;
    
    std::string us_name;
    std::cout << "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç: ";
    std::cin >> us_name;
    std::cout << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "<< us_name << std::endl;


    Laundry laundry(us_name);
    laundry.list_activity();
    

    return 0;
}
