#include "Laundry.h"
#include "Village.h"
#include "GameClock.h"
#include "Assignment.h"
#include "Utils.h"
#include "QuestFlags.h"
#include "WatchingBirds.h"
#include <iostream>
#undef max

Laundry::Laundry(const std::string& name, GameClock& c, QuestFlags& q) : us_name(name), clock(c), questFlags(q) {}

void Laundry::setVillage(Village* v) {
    village = v;
}

void Laundry::message_laundry() {
    std::cout << "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ø—Ä–∞—á–µ—á–Ω—É—é!üß∫" << std::endl;
}
void Laundry::check_day() {
    if (clock.day < 5) {
        iscamera = false;
    }
}
std::string Laundry::user_text(std::string text) const {
    std::string user_name = "üë§ " + us_name + ": ";
    return user_name + text;
}

void Laundry::add_assigm(const std::string& desc) {
    assignments[nextAssigId++] = Assignment(desc);
}

void Laundry::removeAssignmentByText(const std::string& text) {
    for (auto it = assignments.begin(); it != assignments.end(); ) {
        if (it->second.getDescription() == text) {
            std::cout << "–ó–∞–¥–∞–Ω–∏–µ \"" << it->second.getDescription() << "\" —É–¥–∞–ª–µ–Ω–æ!\n";
            it = assignments.erase(it);
            return; // —É–¥–∞–ª–∏–ª–∏ –∏ –≤—ã—à–ª–∏
        }
        else {
            ++it;
        }
    }
    std::cout << "–ó–∞–¥–∞–Ω–∏–µ \"" << text << "\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n";
}


void Laundry::add_pro_assig(const std::string& desc, const std::vector<std::string>& subs) {
    assignments[nextAssigId++] = Assignment(desc, subs);
}

void Laundry::print_Assigm() {
    for (const auto& pair : assignments) {
        std::cout << pair.first << ": ";
        pair.second.print();
        std::cout << std::endl;
    }
}

// –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
void Laundry::completeSubTask(int id, const std::string& item) {
    auto it = assignments.find(id);
    if (it != assignments.end()) {
        it->second.completeSubTask(item);
    }
    else {
        std::cout << "–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n";
    }
}

void Laundry::customers() {
    struct Customers {
        std::string name;
        std::string text;
        std::function<void()> interaction; // —Ñ—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    };


    std::vector<Customers> customer = {
        {"üë©‚Äçü¶∞ –û–ª—å–≥–∞", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –∑–¥–µ—Å—å –±–µ–ª—å—ë —Å –æ—Ç–ø—É—Å–∫–∞ –ø–µ—Å–æ–∫ - –ø–æ–≤—Å—é–¥—É!",
            [this]() {
                print_name("üí¨–û–ª—å–≥–∞: ");
                slowPrint("–ú–æ–∂–µ—Ç —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∂–∏–º '–ø–ª—è–∂–Ω–∞—è —Å—Ç–∏—Ä–∫–∞'? ");

                std::cout << termcolor::bright_grey << "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç—É...\n" << termcolor::reset;
                space_enter("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç—É...");
            }
        },
        {"üßî –í–ª–∞–¥–∏–º–∏—Ä", "",
            [this]() {
                if (!questFlags.get("has_found_sock_vladimir")) {
                    print_name("üí¨–í–ª–∞–¥–∏–º–∏—Ä: ");
                    slowPrint("–ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è –º–∞—à–∏–Ω–∫–∞ –Ω–µ —Å—ä–µ—Å—Ç –µ—â—ë –æ–¥–∏–Ω –Ω–æ—Å–æ–∫...");

                    std::cout << termcolor::on_bright_magenta << "–ù–æ–í—ã–ô –∫–í–µ–°—Ç –ü–æ–õ—É–ß–µ–ù!" << termcolor::reset << std::endl;

                    std::string assigment = "üí° –ù–∞–π–¥–∏ –≤—Ç–æ—Ä–æ–π –Ω–æ—Å–æ–∫ –≤–ª–∞–¥–∏–º–∏—Ä–∞";
                    std::cout << assigment << std::endl;
                    add_assigm(assigment);
                    std::cout << termcolor::bright_grey << "–ö–∞–∂–µ—Ç—Å—è –ø–æ—Ä–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ —Å–ª–æ–∂–∏—Ç—å.." << termcolor::reset << std::endl;

                    questFlags.set("sock_hunt");
                }
                else {
                    print_name("üßî –í–ª–∞–¥–∏–º–∏—Ä: ");
                    slowPrint("–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤. –û–¥–µ–∂–¥–∞ —á–∏—Å—Ç–∞—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî —Ç–æ–∂–µ.");
                    std::cout << termcolor::bright_grey << "–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!" << termcolor::reset;
                    space_enter("–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!");
                }
            }
        },
        {"üëß –°–æ—Ñ–∏—è", "–ú–∞–º, –∞ –º–æ–∂–Ω–æ —Å—Ç–∏—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫–∏?üß∏", [this]() {
            print_name("üëß –°–æ—Ñ–∏—è : ");
            slowPrint("–£ –º–æ–µ–≥–æ –º–∏—à–∫–∏ –≥—Ä—è–∑–Ω–∞—è –ª–∞–ø–∫–∞. –¢—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å? –û–Ω –Ω–µ –±–æ–∏—Ç—Å—è!");

            std::string question;

            while (true) {
                std::cout << "–¥–∞/–Ω–µ—Ç: ";
                std::cin >> question;
                std::cout << std::endl;

                if (question == "–Ω–µ—Ç") {
                    print_name("üëß –°–æ—Ñ–∏—è : ");
                    slowPrint("–ê –æ–Ω –∏ —Ç–∞–∫ —É–∂–µ –≤–µ—Å—å –ø—ã–ª—å–Ω—ã–π... –ù—É –ª–∞–¥–Ω–æ. –Ø –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä—è—á—É –µ–≥–æ –ø–æ–¥ –ø–æ–¥—É—à–∫—É.");
                    std::cout << "üò¢" << std::endl;
                    break;
                }
                else if (question == "–¥–∞") {
                    questFlags.set("sofia_bear_given");
                    if (questFlags.get("sofia_bear_given")) {

                        questFlags.set("sofia_bear");

                        std::cout << termcolor::blue << "–ü–æ–ª—É—á–µ–Ω –º–µ–¥–≤–µ–¥—å!" << termcolor::reset << std::endl;
                        break;
                    }
                }
                else {
                    std::cout << termcolor::red << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!" << termcolor::reset << std::endl;
                }
            }

        }},
        {"üßë‚Äçüîß –ò–≥–æ—Ä—å", "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –∑–∞–±—ã–ª –∫–ª—é—á–∏ –æ—Ç —Å—É—à–∏–ª–∫–∏...", [this]() {

            print_name("üßë‚Äçüîß –ò–≥–æ—Ä—å: ");
            slowPrint("–ü—Ä–∞—á–µ—á–Ω–∞—è ‚Äî –∫–∞–∫ –º–∏–Ω–∏ - –≥–∞–ª–∞–∫—Ç–∏–∫–∞.–í—Å—ë –∫—Ä—É—Ç–∏—Ç—Å—è, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.\n–ï—Å–ª–∏ —á—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è ‚Äî –∑–æ–≤–∏.–¢–æ–ª—å–∫–æ –Ω–µ –Ω–æ—á—å—é, –ª–∞–¥–Ω–æ? \n–ò –≤–æ—Ç –µ—â–µ –º–æ–∏ —Ä–∞–±–æ—á–∏–µ —Ç—Ä—è–ø–∫–∏");

            questFlags.set("meet_igor");
        }},
        {"üëµ –ë–∞–±—É—à–∫–∞ –ó–∏–Ω–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—Å—ë –∫–∏–ø—è—Ç–∫–æ–º, –ø–æ—Ç–æ–º –ø–æ–ª–æ—Å–∫–∞—Ç—å - –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞!", [this]() {
            if (questFlags.get("item_for_zina")) {
                print_name("üëµ –ë–∞–±—É—à–∫–∞ –ó–∏–Ω–∞: ");
                slowPrint("–ê –≤—ã —Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —É–∫—Å—É—Å? –ë–µ–∑ –Ω–µ–≥–æ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞ –∫–∞–∫ –Ω–∞–∂–¥–∞–∫!");

                questFlags.set("item_for_zina");
                std::cout << termcolor::on_bright_magenta << "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" << termcolor::reset << " ¬´–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–∞–±—É—à–∫–∏ –ó–∏–Ω—ã¬ª" << std::endl;

                add_pro_assig("–°–æ–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –±–∞–±—É—à–∫–∏ –ó–∏–Ω—ã", { "–£–∫—Å—É—Å", "–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã–ª–æ", "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞" });
            }
            else {

            }

        }},
        {"", "", [this]() {
            if (!questFlags.get("degree_mark")) {
                print_name("üìö –ú–∞—Ä–∫ : ");
                slowPrint("–ï—Å–ª–∏ —Å–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–∞ –∑–∞–≤—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç, —Å–µ–≥–æ–¥–Ω—è ‚Äî –¥–µ–Ω—å –±–æ–ª—å—à–æ–π —Å—Ç–∏—Ä–∫–∏ –∏ –±–æ–ª—å—à–æ–π –ø–∞–Ω–∏–∫–∏!");
                questFlags.set("degree_mark");
            }
            else {
                print_name("üìö –ú–∞—Ä–∫: ");
                slowPrint("–ì–æ–≤–æ—Ä—è—Ç, –µ—Å–ª–∏ —Ç—Ä–∏ —Ä–∞–∑–∞ –ø–æ—Å—Ç–∏—Ä–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–µ–ø–µ–Ω—å –±–∞–∫–∞–ª–∞–≤—Ä–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –±—ã—Ç–∞. –Ø –Ω–∞ –≤—Ç–æ—Ä–æ–º –∑–∞—Ö–æ–¥–µ.");

                std::cout << termcolor::bright_grey << "–ö–∞–∫ —Å–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–∞?" << termcolor::reset;
                space_enter("–ö–∞–∫ —Å–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–∞ ? ");

                print_name("üìö –ú–∞—Ä–∫: ");
                slowPrint("–¢–µ–º–∞: ¬´–í–ª–∏—è–Ω–∏–µ —Ü–∏–∫–ª–∞ –æ—Ç–∂–∏–º–∞ –Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –º—ã—Å–ª–∏ –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ¬ª. –ö–æ–º–∏—Å—Å–∏—è –æ—Ü–µ–Ω–∏–ª–∞.");

            }
        }},
        {"üé® –ê–Ω–Ω–∞", "–ö—Ç–æ-—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª —Ä–æ–∑–æ–≤—ã–π –ø–ª–∞—Ç–æ–∫ –≤ –≥–æ—Ä–æ—à–µ–∫? üéÄ", [this]() {
            space_enter("–ö–∞–∂–µ—Ç—Å—è, —è –≤–∏–¥–µ–ª –µ–≥–æ –Ω–∞ –ø–æ–ª–∫–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∫–∞–Ω—è–º–∏. –¢—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ —Ç–∞–º?");
            print_name("üé® –ê–Ω–Ω–∞");
            Sleep(100);
            slowPrint("–û–π, –ø—Ä–∞–≤–¥–∞?! –°–ø–∞—Å–∏–±–æ! üòä‚ú® –Ø, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –µ–≥–æ —Ç–∞–º –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞‚Ä¶ –ü–æ–π–¥—É –ø–æ—Å–º–æ—Ç—Ä—é! üèÉ‚Äç‚ôÄÔ∏èüí®");
        }},
        {"üê± –ö–æ—Ç –ë–æ—Ä–∏—Å", "–ú—è—É! –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –º–æ–π –ø–ª–µ–¥, –æ–Ω –ø–∞—Ö–Ω–µ—Ç –º–Ω–æ—é! (‚âß‚ó°‚â¶)", [this]() {
            space_enter("–ú–æ–∂–µ—Ç, —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å? –¢–æ–ª—å–∫–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –æ–±–µ—â–∞—é!");
        }},
        {"üßò‚Äç‚ôÇÔ∏è –ê–ª–µ–∫—Å–µ–π", "–°—Ç–∏—Ä–∞—Ç—å - —ç—Ç–æ –∫–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è. –¢–µ–ø–ª–æ, –±–µ–ª—ã–π —à—É–º, –∞—Ä–æ–º–∞—Ç —Å–≤–µ–∂–µ—Å—Ç–∏...(Ôºç‚Äø‚ÄøÔºç)", [this]() {
            space_enter("–ü–æ—Ö–æ–∂–µ, –ø—Ä–∞—á–µ—á–Ω–∞—è ‚Äî –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏!");
        }},
        {"üíÉ –ù–∏–∫–∞", "–ü–æ–∫–∞ –±–µ–ª—å—ë –∫—Ä—É—Ç–∏—Ç—Å—è, —è –ø–æ–π–¥—É –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É—é –±–∞—á–∞—Ç—É! (^-^)„Éé", [this]() {
            space_enter("–ó–≤—É—á–∏—Ç –≤–µ—Å–µ–ª–æ! –ù–µ –∑–∞–±—É–¥—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∏—Ä–∫–µ –ø–æ—Å–ª–µ —Ç–∞–Ω—Ü–∞.");
        }},
        {"üë®‚Äçüíº –ê—Ä—Ç—ë–º", "–Ø –ø—Ä–∏—à—ë–ª —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ù–∞–¥–µ—é—Å—å, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–Ω—è–ª –º–æ—é –º–∞—à–∏–Ω–∫—É!", [this]() {
            space_enter("–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–≤–æ—è –º–∞—à–∏–Ω–∫–∞ –∂–¥—ë—Ç —Ç–µ–±—è. (o_o)");
            print_name("üë®‚Äçüíº –ê—Ä—Ç—ë–º");
            slowPrint("–û—Ç–ª–∏—á–Ω–æ, –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞.(^_^)");
        }},
        {"üßï –ê–º–∏–Ω–∞", "–í–æ–¥–∞ –ø–∞—Ö–Ω–µ—Ç –∂–∞—Å–º–∏–Ω–æ–º? –ò–ª–∏ —ç—Ç–æ –º–æ–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Å–Ω–æ–≤–∞ –ø—Ä–æ–ª–∏–ª—Å—è...", [this]() {
            space_enter("–ê—Ä–æ–º–∞—Ç—ã –¥–µ–ª–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—è—Ç–Ω–µ–µ ‚Äî –ø–æ–ª–µ–∑–Ω–æ –∑–∞–º–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏.");
            print_name("üßï –ê–º–∏–Ω–∞");
            slowPrint("–¢–æ—á–Ω–æ! –î–∞–∂–µ –≤ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ. (‚åí‚Äø‚åí)");
        }},
        {"üë®‚Äçüç≥ –ü–∞–≤–µ–ª", "–®–µ—Ñ-–ø–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –≥—Ä—è–∑–Ω—ã–π —Ñ–∞—Ä—Ç—É–∫!", [this]() {
            space_enter("–ß–∏—Å—Ç—ã–π —Ñ–∞—Ä—Ç—É–∫ ‚Äî —á–∏—Å—Ç—ã–µ –º—ã—Å–ª–∏. (¬¨‚Äø¬¨)");
            print_name("üë®‚Äçüç≥ –ü–∞–≤–µ–ª");
            slowPrint("–ê–±—Å–æ–ª—é—Ç–Ω–æ! –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –º—ã—Å–ª–∏ —è—Å–Ω—ã–º–∏.");
        }},
        {"üë©‚Äçüé§ –õ–∞–Ω–∞", "–ë–µ–ª—å—ë –ø–æ—Å—Ç–∏—Ä–∞—é - –∏ —Å—Ä–∞–∑—É –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏—é. –ë–∞—Ä–∞–±–∞–Ω—ã –Ω–µ –∂–¥—É—Ç! (^-^)„Ééü•Å", [this]() {
            space_enter("–ó–≤—É—á–∏—Ç, –∫–∞–∫ –±—É–¥—Ç–æ –º—É–∑—ã–∫–∞ –∑–æ–≤—ë—Ç –≤—Å–µ—Ö –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫!");
            print_name("üë©‚Äçüé§ –õ–∞–Ω–∞");
            slowPrint("–ò–º–µ–Ω–Ω–æ! –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∏—Ç–º?");
            std::string go_concert;
            std::cout << termcolor::green << "(–¥–∞/–Ω–µ—Ç)" << termcolor::reset;
            std::cin >> go_concert;
            while (true) {
                if (go_concert == "–¥–∞") {
                    questFlags.set("concert");
                    print_name("üë©‚Äçüé§ –õ–∞–Ω–∞");
                    slowPrint("–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏ 3-–≥–æ —á–∏—Å–ª–∞ (^-^)„Éé");
                    break;
                }
                else if (go_concert == "–Ω–µ—Ç") {
                    print_name("üë©‚Äçüé§ –õ–∞–Ω–∞");
                    slowPrint("–ù–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ –≤—Å–µ –ª—é–±—è—Ç –º—É–∑—ã–∫—É –∫–∞–∫ —è...(._.`)");
                    break;
                }
                else {
                    std::cout << "–û–ô! –í–≤–µ–¥–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.." << std::endl;
                }
            }
        }}, 
        {"üë®‚Äçüåæ –ù–∏–∫–æ–ª–∞–π", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–≤–æ–∑, –ø–æ—Ç–æ–º —Å—Ç–∏—Ä–∫–∞... –•–æ—Ä–æ—à–æ, —á—Ç–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ!", [this]() {
            space_enter("–ó–≤—É—á–∏—Ç –∫–∞–∫ –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç—Ä—É–¥–æ–º –∏ —á–∏—Å—Ç–æ—Ç–æ–π.");
            print_name("üë®‚Äçüåæ –ù–∏–∫–æ–ª–∞–π");
            slowPrint("–ê–≥–∞! –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã ‚Äî –ø–æ—Ä—è–¥–æ–∫, –∏ —Å–∞–º–æ–º—É –ª–µ–≥—á–µ –¥—ã—à–∞—Ç—å.");
        }},
        {"üë©‚Äçüíª –í–µ—Ä–∞", "–°—Ç–∏—Ä–∞—é –Ω–æ—á—å—é, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –æ—Ç –∫–æ–¥–∞. –ù–∞–¥–µ—é—Å—å, —Å–æ—Å–µ–¥–∏ –ø–æ–π–º—É—Ç...", [this]() {
            space_enter("–ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –∏ —Å—Ç–∏—Ä–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å?");
            print_name("üë©‚Äçüíª –í–µ—Ä–∞");
            slowPrint("–•–º, –∏–¥–µ—è! Cron job –Ω–∞ –ø—Ä–∞—á–∫—É‚Ä¶ –∂–∞–ª—å, –º–∞—à–∏–Ω–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç bash. (Ôø£‚ñΩÔø£)");
        }},
        {"üßô‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–∏—Å–ª–∞–≤", "–Ø –∑–∞—á–∞—Ä–æ–≤–∞–ª –Ω–æ—Å–∫–∏ –æ—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏! (‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°", [this]() {
            space_enter("–ê –µ—Å–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —Å—Ç–∞—Ä–∏–Ω–∫–µ. (Ôºç‚ÄøÔºç)");
            std::cout << termcolor::magenta << "–ö–≤–µ—Å—Ç: üß¶ ¬´–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ–ø–∞–∂–∏¬ª" << termcolor::reset << std::endl;
            add_assigm("üß¶ ¬´–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ–ø–∞–∂–∏¬ª: –ù–∞–π—Ç–∏ –Ω–æ—Å–∫–∞-–±–µ–≥–ª–µ—Ü–∞");
            questFlags.set("Stanislav_socks");

            print_name("üßô‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–∏—Å–ª–∞–≤");
            slowPrint("–ú—É–¥—Ä–æ —Å–∫–∞–∑–∞–Ω–æ. –î–∞–∂–µ –º–∞–≥–∏–∏ –Ω—É–∂–Ω–∞ –Ω–∞–¥—ë–∂–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞. (¬¨‚Äø¬¨)");
        }},
        {"ü¶∏‚Äç‚ôÄÔ∏è –ö–∏—Ä–∞", "–ú–æ–π –∫–æ—Å—Ç—é–º —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è –Ω–µ–ª—å–∑—è —Å—É—à–∏—Ç—å –≥–æ—Ä—è—á–∏–º –≤–æ–∑–¥—É—Ö–æ–º. –û–Ω... —Å–∂–∏–º–∞–µ—Ç—Å—è.", [this]() {}},
        {"üé≠ –†–æ–º–∞–Ω", "–ö–æ—Å—Ç—é–º—ã –¥–ª—è —Å–ø–µ–∫—Ç–∞–∫–ª—è –¥–æ–ª–∂–Ω—ã —Å–∏—è—Ç—å. –ö–∞–∫ –∏ –∞–∫—Ç—ë—Ä—ã.", [this]() {}},
        {"üë®‚ÄçüöÄ –Æ—Ä–∏–π", "–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç–∏ –¥–∞–∂–µ —Ñ–æ—Ä–º–∞ –ø–∞—Ö–Ω–µ—Ç –∑–≤—ë–∑–¥–∞–º–∏.", [this]() {}},
        {"üßí –¢–∏–º—É—Ä", "–ú–∞–º–∞ –≤–µ–ª–µ–ª–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å. –Ø —Å–∞–º –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å...", [this]() {}},
        {"üë©‚Äçüåæ –î–∞—Ä—å—è", "–° –≥—Ä—è–¥–∫–∏ ‚Äî –≤ –±–∞—Ä–∞–±–∞–Ω. –í—Å—ë –∫–∞–∫ –ø–æ –ø–ª–∞–Ω—É.", [this]() {}},
        {"üê∂ –ë–æ–Ω—è", "–ì–∞–≤! –ü—Ä–∏–Ω—ë—Å –æ–¥–µ—è–ª–æ. –û–Ω–æ —Å–∞–º–æ –ø—Ä–∏—à–ª–æ –≤ –≥—Ä—è–∑—å, —á–µ—Å—Ç–Ω–æ!", [this]() {}},
        {"üë®‚Äçüè´ –ï–≤–≥–µ–Ω–∏–π", "–ü—Ä–µ–∂–¥–µ —á–µ–º —Å—Ç–∏—Ä–∞—Ç—å, –ø—Ä–æ–≤–µ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ç–∫–∞–Ω–∏.", [this]() {}},
        {"üë©‚Äçüöí –ö–∞—Ç—è", "–§–æ—Ä–º–∞ –ø–æ–∂–∞—Ä–Ω–∞—è, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä—è—á–∞—è... –æ—Ç —Å—Ç–∏—Ä–∫–∏!", [this]() {}}

    };

    if (clock.quality_customers_day == 0) {
        std::cout << "–ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –ø—Ä–∞—á–µ—á–Ω–æ–π –Ω—É–∂–Ω–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ." << std::endl;
    }
    else {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> distrib(0, customer.size() - 1);

        int index = distrib(gen);

        const Customers& c = customer[index];

        clock.decrementCustomerCount();
        //std::cout << clock.quality_customers_day << std::endl;

        std::cout << "–ö—Ç–æ-—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∞—á–µ—á–Ω—É—é...\n";

        std::cout << termcolor::yellow << c.name << ": " << termcolor::reset;
        if (!c.text.empty()) {
            slowPrint(c.text);
        }
        std::cout << std::endl;

        c.interaction();
    }

}

void Laundry::give_clothes() {
    float salary;
    std::string give;
    while (true) {
        std::cout << termcolor::green << "[–æ—Ç–¥–∞—Ç—å –æ–¥–µ–∂–¥—É(–¥–∞/–Ω–µ—Ç)]: " << termcolor::reset;
        std::cin >> give;
        std::cout << std::endl;
        if (give == "–Ω–µ—Ç") {
            std::cout << "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –ª—é–±—è—Ç –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å! –û–Ω–∏ –∑–∞–ø–ª–∞—Ç—è—Ç –º–µ–Ω—å—à–µ" << std::endl;
            fine += 0.5f;
            std::cout << (price_washing - fine);
            give_clothes();

        }
        else if (give == "–¥–∞") {
            space_enter("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû");

            if (fine == 0.0f) {
                salary = price_washing * amount_clothing_clean;
                questFlags.get("sofia_bear") ? salary += 1 : salary;  // —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä 
            }
            else {
                salary = (price_washing - fine) * amount_clothing_clean;
            }
            wallet += salary;
            amount_clothing_clean = 0;
            std::cout << "–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª " << termcolor::yellow << salary << "$" << termcolor::reset << std::endl;
            list_activity();
        }
        break;
    }
}

void Laundry::space_enter(std::string text) {
    std::string wish;
    std::cout << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;

    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::getline(std::cin, wish); // —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏

    std::cout << std::endl;
    std::string user = "üë§" + us_name + ": " + text;
    slowPrint(user);

    if (wish != " ") {
        std::cout << "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—Å–Ω–∞—á–∞–ª–æ space, –ø–æ—Ç–æ–º enter)" << std::endl;
        space_enter(text);
    }
}

void Laundry::process_washing() {
    std::cout << "–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ä–∫–∏..." << std::endl;
    for (int i = 0; i < 10; ++i) {
        Sleep(1500);
        std::cout << "‚ñà ";
    }
    if (questFlags.get("sofia_bear")) {
        std::cout << termcolor::green << "\n–ë–æ–Ω—É—Å –æ—Ç —Å—Ç–∏—Ä–∫–∏ –º–µ–¥–≤–µ–¥—è + 1$" << termcolor::reset << std::endl;
        questFlags.vlear("sofia_bear");

    }
    else if (questFlags.get("Stanislav_socks")) {
        std::cout << termcolor::blue << "–í –±–∞—Ä–∞–±–∞–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ω–æ—Å–æ–∫.." << termcolor::reset << std::endl;

        print_name("üßô‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–∏—Å–ª–∞–≤");
        slowPrint("–ß—Ç–æ?! –ú–∞–≥–∏—è –ø–æ–¥–≤–µ–ª–∞?! –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–µ–≥–ª–µ—Ü–∞!");

        std::string assignment = "–ù–∞–π—Ç–∏ –±–µ–≥–ª–µ—Ü–∞-–Ω–æ—Å–∫–∞";
        std::cout << termcolor::magenta << "–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: " << assignment << termcolor::reset << std::endl;
        add_assigm(assignment);
        
        std::cout << termcolor::on_bright_grey << "–ü–æ—Ä–∞ —Å–ª–æ–∂–∏—Ç—å –≤—Å–µ –ø–æ –ø–æ–ª–æ—á–∫–∞–º" << termcolor::reset << std::endl;
    }
    else {
        std::cout << "\n–û–¥–µ–∂–¥–∞ –ø–æ—Å—Ç–∏—Ä–∞–Ω–∞!" << std::endl;
        give_clothes();
    }
}

void Laundry::process_drying() {
    std::cout << "–ü—Ä–æ—Ü–µ—Å—Å —Å—É—à–∫–∏..." << std::endl;
    for (int i = 0; i < 10; ++i) {
        Sleep(1500);                // !!!!–¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—É—à–∏—Ç—å —á—Ç–æ–±—ã –¥–æ–ø. —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—É—à–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç  —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–∞ —Ä–∞–Ω–¥–æ–º –≥–æ–≤–æ—Ä–∏–ª–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç
        std::cout << "‚ñä ";
    }
    std::cout << "\n–û–¥–µ–∂–¥–∞ –≤—ã—Å—É—à–µ–Ω–∞!" << std::endl;
}

void Laundry::DIY() {
    std::cout << "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ—á–∏–Ω–∫–∏ 1$" << std::endl;

    std::string pay;

    std::cout << "[–∑–∞–ø–ª–∞—Ç–∏—Ç—å 1$]" << termcolor::blue << "(space + enter)" << termcolor::reset;

    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::getline(std::cin, pay);

    wallet -= 1;
    level_serviceability = 3;
    std::cout << termcolor::italic << "–ó–∞–ø–ª–∞—á–µ–Ω–æ 1$\n–£—Ä–æ–≤–µ–Ω—å –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: " << level_serviceability << termcolor::reset << std::endl;
}

std::pair<std::map<int, std::string>, std::map<int, std::function<void()>>> Laundry::getAvailableActions() {
    std::map<int, std::string> activities;
    std::map<int, std::function<void()>> actions;

    int nextIndex = 1;
    activities[nextIndex] = "–û–±—É—á–µ–Ω–∏–µ";
    actions[nextIndex++] = [this]() {
        std::ifstream file("instruction.txt");
        if (file.is_open()) {
            std::string line;
            while (std::getline(file, line)) {
                std::cout << line << std::endl;
            }
            file.close();
        }
        std::cout << std::endl;
        };

    activities[nextIndex] = "–°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É üëï";
    actions[nextIndex++] = [this]() {
        while (amount_clothing_dirty > 0 && level_serviceability > 0) {
            code_for_washing();
            clock.advanceTime(2, 0);
            amount_clothing_clean = amount_clothing_dirty;
            amount_clothing_dirty = 0;
            level_serviceability -= 1;
            process_washing();

            give_clothes();
        }
        if (amount_clothing_dirty == 0)
            std::cout << "–£ —Ç–µ–±—è –Ω–µ—Ç —á—Ç–æ —Å—Ç–∏—Ä–∞—Ç—å!" << std::endl;
        if (level_serviceability == 0) {
            std::cout << termcolor::italic << "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–Ω–∞!" << termcolor::reset << std::endl;

            if (questFlags.get("meet_igor")) {
                while (true) {
                    int enter;
                    std::cout << "–•–æ—á–µ—à—å –ø–æ—á–∏–Ω–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (1) –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ò–≥–æ—Ä—é (2): ";
                    std::cin >> enter;

                    if (enter == 1) {
                        DIY();
                        break;
                    }
                    else if (enter == 2) {
                        if (clock.isDaytime()) {
                            print_name("üßë‚Äçüîß –ò–≥–æ—Ä—å: ");
                            slowPrint("–û–ø—è—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∏–ª–∏! –î—É–º–∞–µ—Ç–µ, –µ—Å–ª–∏ —Ç—Ä–∏ –Ω–æ—Å–∫–∞ ‚Äî —ç—Ç–æ –µ—â—ë –Ω–µ —Å—Ç–∏—Ä–∫–∞?");

                            std::cout << "–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–º–æ–Ω—Ç–∞..." << std::endl;
                            for (int i = 0; i < 3; ++i) {
                                Sleep(1000);
                                std::cout << "‚ñà ";

                                print_name("\nüßë‚Äçüîß –ò–≥–æ—Ä—å: ");
                                slowPrint("–í–∏–Ω–æ–≤–∞—Ç –±—ã–ª —Ç—Ä–∞–Ω—Å–º–æ–¥—É–ª—å–Ω—ã–π –ø–µ—Ä–µ–≥–∏–± —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ—Ç–æ–∫–∞.–®—É—Ç–∫–∞.–¢–∞–º –ø—Ä–æ—Å—Ç–æ –Ω–æ—Å–æ–∫ –∑–∞—Å—Ç—Ä—è–ª.");
                                level_serviceability = 3;
                            }
                            break;
                        }
                        else {
                            std::cout << termcolor::bright_red << "üßë‚Äçüîß –ò–≥–æ—Ä—å —É–∂–µ —Å–ø–∏—Ç! –ü—Ä–∏–¥—ë—Ç—Å—è –∫–∞–∫-—Ç–æ —Å–∞–º–æ–º—É..." << termcolor::reset << std::endl;
                        }
                    }
                    else {
                        std::cout << termcolor::red << "–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2" << termcolor::reset << std::endl;
                    }
                }
            }
            else {
                DIY();
            }

        }
        };

    activities[nextIndex] = "–ñ–¥–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üëÄ";
    actions[nextIndex++] = [this]() {
        std::cout << "–ü–æ—Ä–æ–π –≤—Ä–µ–º—è —Å–ª–æ–≤–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!" << std::endl;
        if (iscamera) {
            WatchingBirds birds;
            birds.random_meet();
        }
        customers();
        amount_clothing_dirty += 1;
        clock.advanceTime(1, 0);
        };

    activities[nextIndex] = "–°–ª–æ–∂–∏—Ç—å –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üåª";
    actions[nextIndex++] = [this]() {
        if (questFlags.get("sock_hunt")) {
            std::cout << termcolor::bright_cyan << "–ù–æ—Å–æ–∫ –Ω–∞–π–¥–µ–Ω!" << termcolor::reset << std::endl;
            //has_found_sock_vladimir = true;
            questFlags.set("has_found_sock_vladimir");
            questFlags.vlear("sock_hunt");

            std::cout << termcolor::bright_grey << "–û—Ç–Ω–µ—Å—Ç–∏ –Ω–æ—Å–æ–∫ –í–ª–∞–¥–∏–º–∏—Ä—É" << termcolor::reset;
            space_enter("–í–æ—Ç –≤–∞—à –Ω–æ—Å–æ–∫!");

            std::this_thread::sleep_for(std::chrono::seconds(1));
            print_name("üßî –í–ª–∞–¥–∏–º–∏—Ä: ");
            slowPrint("–Ø —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª—Å—è —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ—â–∞–Ω–∏–µ. –ê —Ç—É—Ç ‚Äî —Ç–∞–∫–æ–π –ø–æ–≤–æ—Ä–æ—Ç!");
        }
        else if (questFlags.get("Stanislav_socks")) {
            std::cout << termcolor::bright_cyan << "–ù–æ—Å–æ–∫-–±–µ–≥–ª–µ—Ü –Ω–∞–π–¥–µ–Ω!" << termcolor::reset << std::endl;

            std::cout << "–û—Ç–¥–∞—Ç—å –Ω–æ—Å–∫–∞-–±–µ–≥–ª–µ—Ü–∞: ";
            space_enter("–ê –≤–æ—Ç –∏ –Ω–æ—Å–æ—á–µ–∫! –û–Ω –ø—Ä–∏–ª–∏–ø –∫ —Ñ—É—Ç–±–æ–ª–∫–µ..");

            print_name("üßô‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–∏—Å–ª–∞–≤");
            slowPrint("–£—Ä–∞! –ó–Ω–∞—á–∏—Ç, –º–∞–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç‚Ä¶ –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∫–∞ —Ö–∏—Ç—Ä–∞—è! (¬¨‚Äø¬¨)");

            level_serviceability = 4;
            std::cout << std::endl << termcolor::bright_magenta << "–í—ã –ø–æ–ª—É—á–∞—Ç–µ –±–æ–Ω—É—Å –¥–ª—è —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–∫–∏: 4 –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å!" << termcolor::reset << std::endl ;

        }
        else {
            std::cout << "–í—Å–µ —Å–ª–æ–∂–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ!" << std::endl;
            clock.advanceTime(0, 30);
        }
        };

    activities[nextIndex] = "–°–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è üòÆ‚Äçüí®";
    actions[nextIndex++] = [this]() {
        clock.advanceTime(3, 0);
        };

    activities[nextIndex] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è üí°";
    actions[nextIndex++] = [this]() {

        if (assignments.empty()) {
            std::cout << "üß∫ ‚Äî –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ" << std::endl;
        }
        else {
            print_Assigm();
        }
        };

    activities[nextIndex] = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ üí∞";
    actions[nextIndex++] = [this]() {
        if (wallet != 0)
            std::cout << "–£ —Ç–µ–±—è " << termcolor::yellow << wallet << "$" << termcolor::reset << std::endl;
        else
            std::cout << "–î–∞ –∑–¥–µ—Å—å –æ–¥–Ω–∏ –º—É—Ö–∏!ü™∞üï∏Ô∏è" << std::endl;
        };

    if (clock.day >= 3) {
        activities[nextIndex] = "–°—É—à–∏—Ç—å –æ–¥–µ–∂–¥—É üçÉ";
        actions[nextIndex++] = [this]() {
            std::cout << "–ï—Å–ª–∏ –±—ã –Ω–µ —Å—É—à–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∫–∞,\n–æ–¥–µ–∂–¥–∞ –±—ã –¥—Ä—É–∂–∏–ª–∞ —Å –≤–µ—Ç—Ä–æ–º!" << std::endl;
            clock.advanceTime(2, 0);
            };
    }

    if (is_village) {
        activities[nextIndex] = "–ü–æ–π—Ç–∏ –≤ –¥–µ—Ä–µ–≤–Ω—é";
        actions[nextIndex++] = [this]() {
            village->message_village();
            village->list_activity_village();
            };
    }

    int exitIndex = static_cast<int>(activities.size()) + 1;
    activities[exitIndex] = "–ù–∏—á–µ–≥–æ";
    actions[exitIndex++] = []() {
        std::cout << "–•–æ—Ä–æ—à–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!üåû\n";
        };

    if (clock.isNight()) {
        int sleepIndex = static_cast<int>(activities.size()) + 1;
        activities[exitIndex] = "–ü–æ–π—Ç–∏ —Å–ø–∞—Ç—å üåô";
        actions[exitIndex++] = [this]() {
            clock.go_to_bed();
            list_activity();
            };
    }

    return { activities, actions };

}

void Laundry::list_activity() {
    bool running = true;
    while (running) {
        special_events();
        clock.showTime();
        //clock.getCustomerCount();

        auto actionsPair = getAvailableActions();
        auto activities = actionsPair.first;
        auto actions = actionsPair.second;
        int exitIndex = static_cast<int>(activities.size());

        for (const auto& pair : activities) {
            std::cout << pair.first << " " << pair.second << std::endl;
        }

        int choice;
        std::cout << "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? ";
        std::cin >> choice;
        std::cout << std::endl;

        if (actions.count(choice)) {
            actions[choice]();
            if (choice == exitIndex) {
                running = false;
            }
        }
        else {
            std::cout << "–û–ô, —Ç—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!" << std::endl;
        }
    }
}

void Laundry::special_events() {
    switch (clock.day) {
    case 5: {
        if (!questFlags.get("has_met_vanessa")) {
            std::cout << termcolor::bright_blue << "üëµ –í–∞–Ω–µ—Å—Å–∞: " << termcolor::reset;
            std::string message = "–ü—Ä–∏–≤–µ—Ç, " + us_name + ", —è —Ç—É—Ç —É–±–∏—Ä–∞–ª–∞—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ –Ω–∞—à–ª–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç.\n–ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!";
            slowPrint(message, 40);

            std::cout << "\n–ü–æ–ª—É—á–µ–Ω " << termcolor::bright_cyan << "[—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç]\n" << termcolor::reset << std::endl;
            iscamera = true;

            Sleep(100);
            questFlags.set("has_met_vanessa");
            std::cout << termcolor::italic << "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –º–∏—Ä –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏–∏\n" << termcolor::reset;
        }
        break;
    }
    case 2: {
        if (!questFlags.get("has_met_mustafa")) {
            std::cout << termcolor::bright_blue << "üë¥ –ú—É—Å—Ç–∞—Ñ–∞: " << termcolor::reset;
            std::string message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –í–∏–∂—É, —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –ù–∞—à–∞ –¥–µ—Ä–µ–≤–Ω—è –ö–∞—Ç–∞–ª–∏–Ω —Ö–æ—Ç—å –∏ –º–∞–ª–∞, –¥–∞ —É—é—Ç–æ–º —Å–ª–∞–≤–∏—Ç—Å—è.\n–ó–∞–≥–ª—è–Ω–∏ –≤ –≥–æ—Å—Ç–∏ ‚Äî –ø–æ–≤–µ–¥–∞—é —Ç–µ–±–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ –∑–¥–µ—à–Ω–∏—Ö –º–µ—Å—Ç–∞—Ö, –∞ –º–æ—è –í–∞–Ω–µ—Å—Å–∞ –ø–∏—Ä–æ–≥ –∏—Å–ø–µ—á—ë—Ç –∫ —á–∞—é.\n"
                "–ñ–∏–≤—ë–º –º—ã –Ω–µ–ø–æ–¥–∞–ª—ë–∫—É, —Ç–∞–∫ —á—Ç–æ –µ—â—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è!\n";
            slowPrint(message);

            Sleep(100);
            is_village = true;
            std::cout << termcolor::italic << "–û—Ç–∫—Ä—ã—Ç–∞ –¥–µ—Ä–µ–≤–Ω—è\n" << termcolor::reset;
            questFlags.set("has_met_mustafa");

        }
        break;
    }
    case 3: {
        if (questFlags.get("concert")) {
            // —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç
        }
        break;
    }
    case 7: {
        if (!questFlags.get("has_met_ayzuk")) {
            std::cout << termcolor::bright_blue << "üë¶ –ê–π–∑–∏–∫: " << termcolor::reset;
            std::string message = "–≠—ç—ç... –∑–¥—Ä–∞—Å—å—Ç–µ! –£ –º–µ–Ω—è —Ç—É—Ç, –Ω—É... –æ—á–µ–Ω—å –¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –¢–æ–ª—å–∫–æ –º–∞–º–µ –Ω–∏ —Å–ª–æ–≤–∞, –ª–∞–¥–Ω–æ?\n"
                "–ö–æ—Ä–æ—á–µ, –º–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω–∞–¥–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å... –¥–≤–æ–π–∫—É –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞! –í –∂—É—Ä–Ω–∞–ª–µ '–ú–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏' –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –ù—É —è –∏ –ø–æ–¥—É–º–∞–ª ‚Äî –∞ –≤–¥—Ä—É–≥?";
            slowPrint(message, 50);

            std::string diary;
            std::cout << "\n[–í–∑—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫]" << termcolor::blue << "(space + enter)" << termcolor::reset << std::endl;

            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            std::getline(std::cin, diary);

            questFlags.set("has_met_ayzuk");
            std::cout << termcolor::italic << "\n–ü–æ–ª—É—á–µ–Ω –¥–Ω–µ–≤–Ω–∏–∫ –ê–π–∑–∏–∫–∞" << termcolor::reset << std::endl;

            process_washing();

            std::cout << termcolor::bright_blue << "\nüë¶ –ê–π–∑–∏–∫: " << termcolor::reset;
            std::string message1 = "\n–û–≥–æ! –ü–æ–ª—É—á–∏–ª–æ—Å—å?! –¢—ã –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞, —á–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ!\n"
                "–¢–µ–ø–µ—Ä—å –º–∞–º–∞ —Ç–æ—á–Ω–æ –Ω–µ —É–∑–Ω–∞–µ—Ç... –ù–∞–≤–µ—Ä–Ω–æ–µ. –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!\n"
                "–ï—Å–ª–∏ —á—Ç–æ ‚Äî —è –≤ –¥–æ–ª–≥—É –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å. –£ –º–µ–Ω—è –µ—â—ë –∫–æ–µ-—á—Ç–æ –Ω–∞–¥–æ... —ç—ç—ç... –ø–æ—á–∏–Ω–∏—Ç—å.";
            slowPrint(message1);
            std::cout << std::endl;
            space_enter("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû");
        }
    }
    }
}

void Laundry::code_for_washing() {
    int number_errors = 0;

    while (number_errors < 2) {
        std::cout << "–í–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: ";
        int code;
        std::cin >> code;

        if (code == 1010) {
            if (questFlags.get("sofia_bear")) {
                std::cout << termcolor::green << "–ú–∏—à–∫–∞ –≤ —Å—Ç–∏—Ä–∫–µ üß∏" << termcolor::reset << std::endl;
            }
            else if (questFlags.get("Stanislav_socks")) {
                std::cout << termcolor::blue << "–î–≤–∞ –Ω–æ—Å–∫–∞ —É–∂–µ –≤ –±–∞—Ä–∞–±–∞–Ω–µ!" << termcolor::reset << std::endl;
            }
            else {
                std::cout << termcolor::green << "–û–¥–µ–∂–¥–∞ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è!" << termcolor::reset << std::endl;
            }
            break;
        }

        else {
            number_errors++;
            std::cout << termcolor::bright_red << "–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π!" << termcolor::reset << std::endl;

            std::string try_again;
            while (true) {
                std::cout << "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ?(–¥–∞/–Ω–µ—Ç) ";
                std::cin >> try_again;

                if (try_again == "–¥–∞")
                    break;
                else if (try_again == "–Ω–µ—Ç") {
                    list_activity();
                    return;
                }
                else {
                    std::cout << "–ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!";
                }
            }
        }
    }
    if (number_errors == 2) {
        std::cout << termcolor::yellow << "–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–ª—è–Ω–∏ –≤ –æ–±—É—á–µ–Ω–∏–µ üåº" << termcolor::reset << std::endl;
        list_activity();
    }


}

/*–°—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∏—Ä–∞–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –∏ —Å—É—à–∏–ª—å–Ω–æ–π
[–ø—É—Å—Ç–∞—è], [–∑–∞–≥—Ä—É–∂–µ–Ω–∞], [—Å—Ç–∏—Ä–∞–µ—Ç—Å—è/—Å—É—à–∏—Ç—Å—è], [–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞(—à–∞–Ω—Å)]

–¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å –º–∞—à–∏–Ω—ã
*/

